
running 1 test
prove goal={}, assumptions={}, env=Env { variables: [], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
  prove_wc_list goal={}, assumptions={}, env=Env { variables: [], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
    0ms DEBUG produced Constraints { env: Env { variables: [], bias: Soundness }, known_true: true, substitution: {} } from rule "none" in judgment "prove_wc_list"
    0ms DEBUG output={Constraints { env: Env { variables: [], bias: Soundness }, known_true: true, substitution: {} }}
  
  0ms DEBUG result_set={Constraints { env: Env { variables: [], bias: Soundness }, known_true: true, substitution: {} }}

prove goal={}, assumptions={}, env=Env { variables: [], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
  prove_wc_list goal={}, assumptions={}, env=Env { variables: [], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
    0ms DEBUG produced Constraints { env: Env { variables: [], bias: Soundness }, known_true: true, substitution: {} } from rule "none" in judgment "prove_wc_list"
    0ms DEBUG output={Constraints { env: Env { variables: [], bias: Soundness }, known_true: true, substitution: {} }}
  
  0ms DEBUG result_set={Constraints { env: Env { variables: [], bias: Soundness }, known_true: true, substitution: {} }}

prove goal={Foo(u32)}, assumptions={}, env=Env { variables: [], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
  prove_wc_list goal={Foo(u32)}, assumptions={}, env=Env { variables: [], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
    prove_wc goal=Foo(u32), assumptions={}, env=Env { variables: [], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
      prove goal={u32 = u32}, assumptions={Foo(u32)}, env=Env { variables: [], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
        prove_wc_list goal={u32 = u32}, assumptions={Foo(u32)}, env=Env { variables: [], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
          prove_wc goal=u32 = u32, assumptions={Foo(u32)}, env=Env { variables: [], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
            prove_via goal=u32 = u32, via=Foo(u32), assumptions={Foo(u32)}, env=Env { variables: [], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
              0ms DEBUG output={}
            
            new judgment="prove_via { goal: u32 = u32, via: Foo(u32), assumptions: {Foo(u32)}, env: Env { variables: [], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules={}
              strip_cycles failed_rules={}
                0ms DEBUG cycles={}, non_cycles={}
                0ms DEBUG return=({}, HasNonCycle(false))
              
              0ms DEBUG return=FailedJudgment { judgment: "prove_via { goal: u32 = u32, via: Foo(u32), assumptions: {Foo(u32)}, env: Env { variables: [], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }
            
            0ms DEBUG rule assumption failed at step 1 because judgment had no applicable rules: `prove_via { goal: u32 = u32, via: Foo(u32), assumptions: {Foo(u32)}, env: Env { variables: [], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }`  (crates/formality-prove/src/prove/prove_wc.rs:50:14)
            0ms DEBUG produced Constraints { env: Env { variables: [], bias: Soundness }, known_true: true, substitution: {} } from rule "eq" in judgment "prove_wc"
            0ms DEBUG output={Constraints { env: Env { variables: [], bias: Soundness }, known_true: true, substitution: {} }}
          
          prove_after constraints=Constraints { env: Env { variables: [], bias: Soundness }, known_true: true, substitution: {} }, goal={}, assumptions={Foo(u32)}, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
            prove goal={}, assumptions={Foo(u32)}, env=Env { variables: [], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
              prove_wc_list goal={}, assumptions={Foo(u32)}, env=Env { variables: [], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                0ms DEBUG produced Constraints { env: Env { variables: [], bias: Soundness }, known_true: true, substitution: {} } from rule "none" in judgment "prove_wc_list"
                0ms DEBUG output={Constraints { env: Env { variables: [], bias: Soundness }, known_true: true, substitution: {} }}
              
              0ms DEBUG result_set={Constraints { env: Env { variables: [], bias: Soundness }, known_true: true, substitution: {} }}
            
            0ms DEBUG produced Constraints { env: Env { variables: [], bias: Soundness }, known_true: true, substitution: {} } from rule "prove_after" in judgment "prove_after"
            0ms DEBUG output={Constraints { env: Env { variables: [], bias: Soundness }, known_true: true, substitution: {} }}
          
          1ms DEBUG produced Constraints { env: Env { variables: [], bias: Soundness }, known_true: true, substitution: {} } from rule "some" in judgment "prove_wc_list"
          1ms DEBUG output={Constraints { env: Env { variables: [], bias: Soundness }, known_true: true, substitution: {} }}
        
        2ms DEBUG result_set={Constraints { env: Env { variables: [], bias: Soundness }, known_true: true, substitution: {} }}
      
      prove_after constraints=Constraints { env: Env { variables: [], bias: Soundness }, known_true: true, substitution: {} }, goal={}, assumptions={Foo(u32)}, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
        prove goal={}, assumptions={Foo(u32)}, env=Env { variables: [], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
          prove_wc_list goal={}, assumptions={Foo(u32)}, env=Env { variables: [], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
            0ms DEBUG produced Constraints { env: Env { variables: [], bias: Soundness }, known_true: true, substitution: {} } from rule "none" in judgment "prove_wc_list"
            0ms DEBUG output={Constraints { env: Env { variables: [], bias: Soundness }, known_true: true, substitution: {} }}
          
          0ms DEBUG result_set={Constraints { env: Env { variables: [], bias: Soundness }, known_true: true, substitution: {} }}
        
        0ms DEBUG produced Constraints { env: Env { variables: [], bias: Soundness }, known_true: true, substitution: {} } from rule "prove_after" in judgment "prove_after"
        0ms DEBUG output={Constraints { env: Env { variables: [], bias: Soundness }, known_true: true, substitution: {} }}
      
      prove_after constraints=Constraints { env: Env { variables: [], bias: Soundness }, known_true: true, substitution: {} }, goal={}, assumptions={}, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
        prove goal={}, assumptions={}, env=Env { variables: [], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
          prove_wc_list goal={}, assumptions={}, env=Env { variables: [], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
            0ms DEBUG produced Constraints { env: Env { variables: [], bias: Soundness }, known_true: true, substitution: {} } from rule "none" in judgment "prove_wc_list"
            0ms DEBUG output={Constraints { env: Env { variables: [], bias: Soundness }, known_true: true, substitution: {} }}
          
          0ms DEBUG result_set={Constraints { env: Env { variables: [], bias: Soundness }, known_true: true, substitution: {} }}
        
        0ms DEBUG produced Constraints { env: Env { variables: [], bias: Soundness }, known_true: true, substitution: {} } from rule "prove_after" in judgment "prove_after"
        0ms DEBUG output={Constraints { env: Env { variables: [], bias: Soundness }, known_true: true, substitution: {} }}
      
      3ms DEBUG produced Constraints { env: Env { variables: [], bias: Soundness }, known_true: true, substitution: {} } from rule "positive impl" in judgment "prove_wc"
      prove goal={u32 = ?ty_0}, assumptions={Foo(u32)}, env=Env { variables: [?ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
        prove_wc_list goal={u32 = ?ty_0}, assumptions={Foo(u32)}, env=Env { variables: [?ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
          prove_wc goal=u32 = ?ty_0, assumptions={Foo(u32)}, env=Env { variables: [?ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
            prove_via goal=u32 = ?ty_0, via=Foo(u32), assumptions={Foo(u32)}, env=Env { variables: [?ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
              0ms DEBUG output={}
            
            new judgment="prove_via { goal: u32 = ?ty_0, via: Foo(u32), assumptions: {Foo(u32)}, env: Env { variables: [?ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules={}
              strip_cycles failed_rules={}
                0ms DEBUG cycles={}, non_cycles={}
                0ms DEBUG return=({}, HasNonCycle(false))
              
              0ms DEBUG return=FailedJudgment { judgment: "prove_via { goal: u32 = ?ty_0, via: Foo(u32), assumptions: {Foo(u32)}, env: Env { variables: [?ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }
            
            0ms DEBUG rule assumption failed at step 1 because judgment had no applicable rules: `prove_via { goal: u32 = ?ty_0, via: Foo(u32), assumptions: {Foo(u32)}, env: Env { variables: [?ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }`  (crates/formality-prove/src/prove/prove_wc.rs:50:14)
            prove_eq a=u32, b=?ty_0, assumptions={Foo(u32)}, env=Env { variables: [?ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
              prove_eq a=?ty_0, b=u32, assumptions={Foo(u32)}, env=Env { variables: [?ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                0ms DEBUG recursive call to prove_eq { a: u32, b: ?ty_0, assumptions: {Foo(u32)}, env: Env { variables: [?ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }, yielding {}
                new judgment="prove_eq { a: u32, b: ?ty_0, assumptions: {Foo(u32)}, env: Env { variables: [?ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules={}
                  strip_cycles failed_rules={}
                    0ms DEBUG cycles={}, non_cycles={}
                    0ms DEBUG return=({}, HasNonCycle(false))
                  
                  0ms DEBUG return=FailedJudgment { judgment: "prove_eq { a: u32, b: ?ty_0, assumptions: {Foo(u32)}, env: Env { variables: [?ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }
                
                0ms DEBUG rule symmetric failed at step 0 because judgment had no applicable rules: `prove_eq { a: u32, b: ?ty_0, assumptions: {Foo(u32)}, env: Env { variables: [?ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }`  (crates/formality-prove/src/prove/prove_eq.rs:38:14)
                prove_existential_var_eq v=?ty_0, b=u32, assumptions={Foo(u32)}, env=Env { variables: [?ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                  equate_variable x=?ty_0, p=u32, env=Env { variables: [?ty_0], bias: Soundness }
                    0ms DEBUG equated: constraints=Constraints { env: Env { variables: [?ty_0], bias: Soundness }, known_true: true, substitution: {?ty_0 => u32} }, goals={}
                    prove_after constraints=Constraints { env: Env { variables: [?ty_0], bias: Soundness }, known_true: true, substitution: {?ty_0 => u32} }, goal={}, assumptions={Foo(u32)}, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                      prove goal={}, assumptions={Foo(u32)}, env=Env { variables: [], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                        prove_wc_list goal={}, assumptions={Foo(u32)}, env=Env { variables: [], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                          0ms DEBUG produced Constraints { env: Env { variables: [], bias: Soundness }, known_true: true, substitution: {} } from rule "none" in judgment "prove_wc_list"
                          0ms DEBUG output={Constraints { env: Env { variables: [], bias: Soundness }, known_true: true, substitution: {} }}
                        
                        0ms DEBUG result_set={Constraints { env: Env { variables: [], bias: Soundness }, known_true: true, substitution: {} }}
                      
                      0ms DEBUG produced Constraints { env: Env { variables: [?ty_0], bias: Soundness }, known_true: true, substitution: {?ty_0 => u32} } from rule "prove_after" in judgment "prove_after"
                      0ms DEBUG output={Constraints { env: Env { variables: [?ty_0], bias: Soundness }, known_true: true, substitution: {?ty_0 => u32} }}
                    
                  
                  1ms DEBUG produced Constraints { env: Env { variables: [?ty_0], bias: Soundness }, known_true: true, substitution: {?ty_0 => u32} } from rule "existential-nonvar" in judgment "prove_existential_var_eq"
                  1ms DEBUG output={Constraints { env: Env { variables: [?ty_0], bias: Soundness }, known_true: true, substitution: {?ty_0 => u32} }}
                
                1ms DEBUG produced Constraints { env: Env { variables: [?ty_0], bias: Soundness }, known_true: true, substitution: {?ty_0 => u32} } from rule "existential" in judgment "prove_eq"
                prove_normalize p=?ty_0, assumptions={Foo(u32)}, env=Env { variables: [?ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                  prove_normalize_via goal=?ty_0, via=Foo(u32), assumptions={Foo(u32)}, env=Env { variables: [?ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                    0ms DEBUG output={}
                  
                  new judgment="prove_normalize_via { goal: ?ty_0, via: Foo(u32), assumptions: {Foo(u32)}, env: Env { variables: [?ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules={}
                    strip_cycles failed_rules={}
                      0ms DEBUG cycles={}, non_cycles={}
                      0ms DEBUG return=({}, HasNonCycle(false))
                    
                    0ms DEBUG return=FailedJudgment { judgment: "prove_normalize_via { goal: ?ty_0, via: Foo(u32), assumptions: {Foo(u32)}, env: Env { variables: [?ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }
                  
                  0ms DEBUG rule normalize-via-assumption failed at step 1 because judgment had no applicable rules: `prove_normalize_via { goal: ?ty_0, via: Foo(u32), assumptions: {Foo(u32)}, env: Env { variables: [?ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }`  (crates/formality-prove/src/prove/prove_normalize.rs:27:14)
                  0ms DEBUG output={}
                
                new judgment="prove_normalize { p: ?ty_0, assumptions: {Foo(u32)}, env: Env { variables: [?ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules={FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: ?ty_0, via: Foo(u32), assumptions: {Foo(u32)}, env: Env { variables: [?ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}
                  strip_cycles failed_rules={FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: ?ty_0, via: Foo(u32), assumptions: {Foo(u32)}, env: Env { variables: [?ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}
                    failed_rule failed_rule=FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: ?ty_0, via: Foo(u32), assumptions: {Foo(u32)}, env: Env { variables: [?ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }
                      strip_cycles failed_rules={}
                        0ms DEBUG cycles={}, non_cycles={}
                        0ms DEBUG return=({}, HasNonCycle(false))
                      
                    
                    0ms DEBUG cycles={FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: ?ty_0, via: Foo(u32), assumptions: {Foo(u32)}, env: Env { variables: [?ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}, non_cycles={}
                    0ms DEBUG return=({FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: ?ty_0, via: Foo(u32), assumptions: {Foo(u32)}, env: Env { variables: [?ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}, HasNonCycle(false))
                  
                  0ms DEBUG return=FailedJudgment { judgment: "prove_normalize { p: ?ty_0, assumptions: {Foo(u32)}, env: Env { variables: [?ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: ?ty_0, via: Foo(u32), assumptions: {Foo(u32)}, env: Env { variables: [?ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }
                
                3ms DEBUG rule normalize-l failed at step 0 because judgment `prove_normalize { p: ?ty_0, assumptions: {Foo(u32)}, env: Env { variables: [?ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }` failed at the following rule(s):
                  the rule "normalize-via-assumption" failed at step #1 (crates/formality-prove/src/prove/prove_normalize.rs:27:14) because
                    judgment had no applicable rules: `prove_normalize_via { goal: ?ty_0, via: Foo(u32), assumptions: {Foo(u32)}, env: Env { variables: [?ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }` (crates/formality-prove/src/prove/prove_eq.rs:68:14)
                3ms DEBUG output={Constraints { env: Env { variables: [?ty_0], bias: Soundness }, known_true: true, substitution: {?ty_0 => u32} }}
              
              3ms DEBUG produced Constraints { env: Env { variables: [?ty_0], bias: Soundness }, known_true: true, substitution: {?ty_0 => u32} } from rule "symmetric" in judgment "prove_eq"
              prove_normalize p=u32, assumptions={Foo(u32)}, env=Env { variables: [?ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                prove_normalize_via goal=u32, via=Foo(u32), assumptions={Foo(u32)}, env=Env { variables: [?ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                  0ms DEBUG output={}
                
                new judgment="prove_normalize_via { goal: u32, via: Foo(u32), assumptions: {Foo(u32)}, env: Env { variables: [?ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules={}
                  strip_cycles failed_rules={}
                    0ms DEBUG cycles={}, non_cycles={}
                    0ms DEBUG return=({}, HasNonCycle(false))
                  
                  0ms DEBUG return=FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(u32), assumptions: {Foo(u32)}, env: Env { variables: [?ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }
                
                0ms DEBUG rule normalize-via-assumption failed at step 1 because judgment had no applicable rules: `prove_normalize_via { goal: u32, via: Foo(u32), assumptions: {Foo(u32)}, env: Env { variables: [?ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }`  (crates/formality-prove/src/prove/prove_normalize.rs:27:14)
                0ms DEBUG output={}
              
              new judgment="prove_normalize { p: u32, assumptions: {Foo(u32)}, env: Env { variables: [?ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules={FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(u32), assumptions: {Foo(u32)}, env: Env { variables: [?ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}
                strip_cycles failed_rules={FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(u32), assumptions: {Foo(u32)}, env: Env { variables: [?ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}
                  failed_rule failed_rule=FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(u32), assumptions: {Foo(u32)}, env: Env { variables: [?ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }
                    strip_cycles failed_rules={}
                      0ms DEBUG cycles={}, non_cycles={}
                      0ms DEBUG return=({}, HasNonCycle(false))
                    
                  
                  0ms DEBUG cycles={FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(u32), assumptions: {Foo(u32)}, env: Env { variables: [?ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}, non_cycles={}
                  0ms DEBUG return=({FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(u32), assumptions: {Foo(u32)}, env: Env { variables: [?ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}, HasNonCycle(false))
                
                0ms DEBUG return=FailedJudgment { judgment: "prove_normalize { p: u32, assumptions: {Foo(u32)}, env: Env { variables: [?ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(u32), assumptions: {Foo(u32)}, env: Env { variables: [?ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }
              
              4ms DEBUG rule normalize-l failed at step 0 because judgment `prove_normalize { p: u32, assumptions: {Foo(u32)}, env: Env { variables: [?ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }` failed at the following rule(s):
                the rule "normalize-via-assumption" failed at step #1 (crates/formality-prove/src/prove/prove_normalize.rs:27:14) because
                  judgment had no applicable rules: `prove_normalize_via { goal: u32, via: Foo(u32), assumptions: {Foo(u32)}, env: Env { variables: [?ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }` (crates/formality-prove/src/prove/prove_eq.rs:68:14)
              4ms DEBUG output={Constraints { env: Env { variables: [?ty_0], bias: Soundness }, known_true: true, substitution: {?ty_0 => u32} }}
              4ms DEBUG output is different from previous iteration, re-executing until fixed point is reached
            
            prove_eq a=u32, b=?ty_0, assumptions={Foo(u32)}, env=Env { variables: [?ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
              prove_eq a=?ty_0, b=u32, assumptions={Foo(u32)}, env=Env { variables: [?ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                0ms DEBUG recursive call to prove_eq { a: u32, b: ?ty_0, assumptions: {Foo(u32)}, env: Env { variables: [?ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }, yielding {Constraints { env: Env { variables: [?ty_0], bias: Soundness }, known_true: true, substitution: {?ty_0 => u32} }}
                0ms DEBUG produced Constraints { env: Env { variables: [?ty_0], bias: Soundness }, known_true: true, substitution: {?ty_0 => u32} } from rule "symmetric" in judgment "prove_eq"
                prove_existential_var_eq v=?ty_0, b=u32, assumptions={Foo(u32)}, env=Env { variables: [?ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                  equate_variable x=?ty_0, p=u32, env=Env { variables: [?ty_0], bias: Soundness }
                    0ms DEBUG equated: constraints=Constraints { env: Env { variables: [?ty_0], bias: Soundness }, known_true: true, substitution: {?ty_0 => u32} }, goals={}
                    prove_after constraints=Constraints { env: Env { variables: [?ty_0], bias: Soundness }, known_true: true, substitution: {?ty_0 => u32} }, goal={}, assumptions={Foo(u32)}, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                      prove goal={}, assumptions={Foo(u32)}, env=Env { variables: [], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                        prove_wc_list goal={}, assumptions={Foo(u32)}, env=Env { variables: [], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                          0ms DEBUG produced Constraints { env: Env { variables: [], bias: Soundness }, known_true: true, substitution: {} } from rule "none" in judgment "prove_wc_list"
                          0ms DEBUG output={Constraints { env: Env { variables: [], bias: Soundness }, known_true: true, substitution: {} }}
                        
                        0ms DEBUG result_set={Constraints { env: Env { variables: [], bias: Soundness }, known_true: true, substitution: {} }}
                      
                      0ms DEBUG produced Constraints { env: Env { variables: [?ty_0], bias: Soundness }, known_true: true, substitution: {?ty_0 => u32} } from rule "prove_after" in judgment "prove_after"
                      0ms DEBUG output={Constraints { env: Env { variables: [?ty_0], bias: Soundness }, known_true: true, substitution: {?ty_0 => u32} }}
                    
                  
                  1ms DEBUG produced Constraints { env: Env { variables: [?ty_0], bias: Soundness }, known_true: true, substitution: {?ty_0 => u32} } from rule "existential-nonvar" in judgment "prove_existential_var_eq"
                  1ms DEBUG output={Constraints { env: Env { variables: [?ty_0], bias: Soundness }, known_true: true, substitution: {?ty_0 => u32} }}
                
                1ms DEBUG produced Constraints { env: Env { variables: [?ty_0], bias: Soundness }, known_true: true, substitution: {?ty_0 => u32} } from rule "existential" in judgment "prove_eq"
                prove_normalize p=?ty_0, assumptions={Foo(u32)}, env=Env { variables: [?ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                  prove_normalize_via goal=?ty_0, via=Foo(u32), assumptions={Foo(u32)}, env=Env { variables: [?ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                    0ms DEBUG output={}
                  
                  new judgment="prove_normalize_via { goal: ?ty_0, via: Foo(u32), assumptions: {Foo(u32)}, env: Env { variables: [?ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules={}
                    strip_cycles failed_rules={}
                      0ms DEBUG cycles={}, non_cycles={}
                      0ms DEBUG return=({}, HasNonCycle(false))
                    
                    0ms DEBUG return=FailedJudgment { judgment: "prove_normalize_via { goal: ?ty_0, via: Foo(u32), assumptions: {Foo(u32)}, env: Env { variables: [?ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }
                  
                  0ms DEBUG rule normalize-via-assumption failed at step 1 because judgment had no applicable rules: `prove_normalize_via { goal: ?ty_0, via: Foo(u32), assumptions: {Foo(u32)}, env: Env { variables: [?ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }`  (crates/formality-prove/src/prove/prove_normalize.rs:27:14)
                  0ms DEBUG output={}
                
                new judgment="prove_normalize { p: ?ty_0, assumptions: {Foo(u32)}, env: Env { variables: [?ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules={FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: ?ty_0, via: Foo(u32), assumptions: {Foo(u32)}, env: Env { variables: [?ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}
                  strip_cycles failed_rules={FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: ?ty_0, via: Foo(u32), assumptions: {Foo(u32)}, env: Env { variables: [?ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}
                    failed_rule failed_rule=FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: ?ty_0, via: Foo(u32), assumptions: {Foo(u32)}, env: Env { variables: [?ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }
                      strip_cycles failed_rules={}
                        0ms DEBUG cycles={}, non_cycles={}
                        0ms DEBUG return=({}, HasNonCycle(false))
                      
                    
                    0ms DEBUG cycles={FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: ?ty_0, via: Foo(u32), assumptions: {Foo(u32)}, env: Env { variables: [?ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}, non_cycles={}
                    0ms DEBUG return=({FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: ?ty_0, via: Foo(u32), assumptions: {Foo(u32)}, env: Env { variables: [?ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}, HasNonCycle(false))
                  
                  0ms DEBUG return=FailedJudgment { judgment: "prove_normalize { p: ?ty_0, assumptions: {Foo(u32)}, env: Env { variables: [?ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: ?ty_0, via: Foo(u32), assumptions: {Foo(u32)}, env: Env { variables: [?ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }
                
                2ms DEBUG rule normalize-l failed at step 0 because judgment `prove_normalize { p: ?ty_0, assumptions: {Foo(u32)}, env: Env { variables: [?ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }` failed at the following rule(s):
                  the rule "normalize-via-assumption" failed at step #1 (crates/formality-prove/src/prove/prove_normalize.rs:27:14) because
                    judgment had no applicable rules: `prove_normalize_via { goal: ?ty_0, via: Foo(u32), assumptions: {Foo(u32)}, env: Env { variables: [?ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }` (crates/formality-prove/src/prove/prove_eq.rs:68:14)
                2ms DEBUG output={Constraints { env: Env { variables: [?ty_0], bias: Soundness }, known_true: true, substitution: {?ty_0 => u32} }}
              
              3ms DEBUG produced Constraints { env: Env { variables: [?ty_0], bias: Soundness }, known_true: true, substitution: {?ty_0 => u32} } from rule "symmetric" in judgment "prove_eq"
              prove_normalize p=u32, assumptions={Foo(u32)}, env=Env { variables: [?ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                prove_normalize_via goal=u32, via=Foo(u32), assumptions={Foo(u32)}, env=Env { variables: [?ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                  0ms DEBUG output={}
                
                new judgment="prove_normalize_via { goal: u32, via: Foo(u32), assumptions: {Foo(u32)}, env: Env { variables: [?ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules={}
                  strip_cycles failed_rules={}
                    0ms DEBUG cycles={}, non_cycles={}
                    0ms DEBUG return=({}, HasNonCycle(false))
                  
                  0ms DEBUG return=FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(u32), assumptions: {Foo(u32)}, env: Env { variables: [?ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }
                
                0ms DEBUG rule normalize-via-assumption failed at step 1 because judgment had no applicable rules: `prove_normalize_via { goal: u32, via: Foo(u32), assumptions: {Foo(u32)}, env: Env { variables: [?ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }`  (crates/formality-prove/src/prove/prove_normalize.rs:27:14)
                0ms DEBUG output={}
              
              new judgment="prove_normalize { p: u32, assumptions: {Foo(u32)}, env: Env { variables: [?ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules={FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(u32), assumptions: {Foo(u32)}, env: Env { variables: [?ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}
                strip_cycles failed_rules={FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(u32), assumptions: {Foo(u32)}, env: Env { variables: [?ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}
                  failed_rule failed_rule=FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(u32), assumptions: {Foo(u32)}, env: Env { variables: [?ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }
                    strip_cycles failed_rules={}
                      0ms DEBUG cycles={}, non_cycles={}
                      0ms DEBUG return=({}, HasNonCycle(false))
                    
                  
                  0ms DEBUG cycles={FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(u32), assumptions: {Foo(u32)}, env: Env { variables: [?ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}, non_cycles={}
                  0ms DEBUG return=({FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(u32), assumptions: {Foo(u32)}, env: Env { variables: [?ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}, HasNonCycle(false))
                
                0ms DEBUG return=FailedJudgment { judgment: "prove_normalize { p: u32, assumptions: {Foo(u32)}, env: Env { variables: [?ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(u32), assumptions: {Foo(u32)}, env: Env { variables: [?ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }
              
              4ms DEBUG rule normalize-l failed at step 0 because judgment `prove_normalize { p: u32, assumptions: {Foo(u32)}, env: Env { variables: [?ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }` failed at the following rule(s):
                the rule "normalize-via-assumption" failed at step #1 (crates/formality-prove/src/prove/prove_normalize.rs:27:14) because
                  judgment had no applicable rules: `prove_normalize_via { goal: u32, via: Foo(u32), assumptions: {Foo(u32)}, env: Env { variables: [?ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }` (crates/formality-prove/src/prove/prove_eq.rs:68:14)
              4ms DEBUG output={Constraints { env: Env { variables: [?ty_0], bias: Soundness }, known_true: true, substitution: {?ty_0 => u32} }}
            
            10ms DEBUG produced Constraints { env: Env { variables: [?ty_0], bias: Soundness }, known_true: true, substitution: {?ty_0 => u32} } from rule "eq" in judgment "prove_wc"
            10ms DEBUG output={Constraints { env: Env { variables: [?ty_0], bias: Soundness }, known_true: true, substitution: {?ty_0 => u32} }}
          
          prove_after constraints=Constraints { env: Env { variables: [?ty_0], bias: Soundness }, known_true: true, substitution: {?ty_0 => u32} }, goal={}, assumptions={Foo(u32)}, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
            prove goal={}, assumptions={Foo(u32)}, env=Env { variables: [], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
              prove_wc_list goal={}, assumptions={Foo(u32)}, env=Env { variables: [], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                0ms DEBUG produced Constraints { env: Env { variables: [], bias: Soundness }, known_true: true, substitution: {} } from rule "none" in judgment "prove_wc_list"
                0ms DEBUG output={Constraints { env: Env { variables: [], bias: Soundness }, known_true: true, substitution: {} }}
              
              0ms DEBUG result_set={Constraints { env: Env { variables: [], bias: Soundness }, known_true: true, substitution: {} }}
            
            0ms DEBUG produced Constraints { env: Env { variables: [?ty_0], bias: Soundness }, known_true: true, substitution: {?ty_0 => u32} } from rule "prove_after" in judgment "prove_after"
            0ms DEBUG output={Constraints { env: Env { variables: [?ty_0], bias: Soundness }, known_true: true, substitution: {?ty_0 => u32} }}
          
          11ms DEBUG produced Constraints { env: Env { variables: [?ty_0], bias: Soundness }, known_true: true, substitution: {?ty_0 => u32} } from rule "some" in judgment "prove_wc_list"
          11ms DEBUG output={Constraints { env: Env { variables: [?ty_0], bias: Soundness }, known_true: true, substitution: {?ty_0 => u32} }}
        
        11ms DEBUG result_set={Constraints { env: Env { variables: [?ty_0], bias: Soundness }, known_true: true, substitution: {?ty_0 => u32} }}
      
      prove_after constraints=Constraints { env: Env { variables: [?ty_1], bias: Soundness }, known_true: true, substitution: {?ty_1 => u32} }, goal={Not(?ty_1)}, assumptions={Foo(u32)}, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
        prove goal={Not(u32)}, assumptions={Foo(u32)}, env=Env { variables: [], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
          prove_wc_list goal={Not(u32)}, assumptions={Foo(u32)}, env=Env { variables: [], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
            prove_wc goal=Not(u32), assumptions={Foo(u32)}, env=Env { variables: [], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
              prove_via goal=Not(u32), via=Foo(u32), assumptions={Foo(u32)}, env=Env { variables: [], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                0ms DEBUG output={}
              
              new judgment="prove_via { goal: Not(u32), via: Foo(u32), assumptions: {Foo(u32)}, env: Env { variables: [], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules={}
                strip_cycles failed_rules={}
                  0ms DEBUG cycles={}, non_cycles={}
                  0ms DEBUG return=({}, HasNonCycle(false))
                
                0ms DEBUG return=FailedJudgment { judgment: "prove_via { goal: Not(u32), via: Foo(u32), assumptions: {Foo(u32)}, env: Env { variables: [], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }
              
              0ms DEBUG rule assumption failed at step 1 because judgment had no applicable rules: `prove_via { goal: Not(u32), via: Foo(u32), assumptions: {Foo(u32)}, env: Env { variables: [], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }`  (crates/formality-prove/src/prove/prove_wc.rs:44:14)
              0ms DEBUG rule trait implied bound failed at step 0 because expression evaluated to an empty collection: `decls.trait_invariants()` (crates/formality-prove/src/prove/prove_wc.rs:92:14)
              0ms DEBUG output={}
            
            new judgment="prove_wc { goal: Not(u32), assumptions: {Foo(u32)}, env: Env { variables: [], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules={FailedRule { rule_name_index: Some(("assumption", 1)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 44, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_via { goal: Not(u32), via: Foo(u32), assumptions: {Foo(u32)}, env: Env { variables: [], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("trait implied bound", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 92, column: 14, cause: EmptyCollection { expr: "decls.trait_invariants()" } }}
              strip_cycles failed_rules={FailedRule { rule_name_index: Some(("assumption", 1)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 44, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_via { goal: Not(u32), via: Foo(u32), assumptions: {Foo(u32)}, env: Env { variables: [], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("trait implied bound", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 92, column: 14, cause: EmptyCollection { expr: "decls.trait_invariants()" } }}
                failed_rule failed_rule=FailedRule { rule_name_index: Some(("assumption", 1)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 44, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_via { goal: Not(u32), via: Foo(u32), assumptions: {Foo(u32)}, env: Env { variables: [], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }
                  strip_cycles failed_rules={}
                    0ms DEBUG cycles={}, non_cycles={}
                    0ms DEBUG return=({}, HasNonCycle(false))
                  
                
                failed_rule failed_rule=FailedRule { rule_name_index: Some(("trait implied bound", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 92, column: 14, cause: EmptyCollection { expr: "decls.trait_invariants()" } }
                
                0ms DEBUG cycles={FailedRule { rule_name_index: Some(("assumption", 1)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 44, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_via { goal: Not(u32), via: Foo(u32), assumptions: {Foo(u32)}, env: Env { variables: [], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}, non_cycles={FailedRule { rule_name_index: Some(("trait implied bound", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 92, column: 14, cause: EmptyCollection { expr: "decls.trait_invariants()" } }}
                0ms DEBUG return=({FailedRule { rule_name_index: Some(("trait implied bound", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 92, column: 14, cause: EmptyCollection { expr: "decls.trait_invariants()" } }}, HasNonCycle(true))
              
              0ms DEBUG return=FailedJudgment { judgment: "prove_wc { goal: Not(u32), assumptions: {Foo(u32)}, env: Env { variables: [], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("trait implied bound", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 92, column: 14, cause: EmptyCollection { expr: "decls.trait_invariants()" } }} }
            
            1ms DEBUG rule some failed at step 0 because judgment `prove_wc { goal: Not(u32), assumptions: {Foo(u32)}, env: Env { variables: [], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }` failed at the following rule(s):
              the rule "trait implied bound" failed at step #0 (crates/formality-prove/src/prove/prove_wc.rs:92:14) because
                expression evaluated to an empty collection: `decls.trait_invariants()` (crates/formality-prove/src/prove/prove_wc_list.rs:28:14)
            1ms DEBUG output={}
          
          new judgment="prove_wc_list { goal: {Not(u32)}, assumptions: {Foo(u32)}, env: Env { variables: [], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules={FailedRule { rule_name_index: Some(("some", 0)), file: "crates/formality-prove/src/prove/prove_wc_list.rs", line: 28, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_wc { goal: Not(u32), assumptions: {Foo(u32)}, env: Env { variables: [], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("trait implied bound", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 92, column: 14, cause: EmptyCollection { expr: "decls.trait_invariants()" } }} }) }}
            strip_cycles failed_rules={FailedRule { rule_name_index: Some(("some", 0)), file: "crates/formality-prove/src/prove/prove_wc_list.rs", line: 28, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_wc { goal: Not(u32), assumptions: {Foo(u32)}, env: Env { variables: [], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("trait implied bound", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 92, column: 14, cause: EmptyCollection { expr: "decls.trait_invariants()" } }} }) }}
              failed_rule failed_rule=FailedRule { rule_name_index: Some(("some", 0)), file: "crates/formality-prove/src/prove/prove_wc_list.rs", line: 28, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_wc { goal: Not(u32), assumptions: {Foo(u32)}, env: Env { variables: [], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("trait implied bound", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 92, column: 14, cause: EmptyCollection { expr: "decls.trait_invariants()" } }} }) }
                strip_cycles failed_rules={FailedRule { rule_name_index: Some(("trait implied bound", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 92, column: 14, cause: EmptyCollection { expr: "decls.trait_invariants()" } }}
                  failed_rule failed_rule=FailedRule { rule_name_index: Some(("trait implied bound", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 92, column: 14, cause: EmptyCollection { expr: "decls.trait_invariants()" } }
                  
                  0ms DEBUG cycles={}, non_cycles={FailedRule { rule_name_index: Some(("trait implied bound", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 92, column: 14, cause: EmptyCollection { expr: "decls.trait_invariants()" } }}
                  0ms DEBUG return=({FailedRule { rule_name_index: Some(("trait implied bound", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 92, column: 14, cause: EmptyCollection { expr: "decls.trait_invariants()" } }}, HasNonCycle(true))
                
              
              0ms DEBUG cycles={}, non_cycles={FailedRule { rule_name_index: Some(("some", 0)), file: "crates/formality-prove/src/prove/prove_wc_list.rs", line: 28, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_wc { goal: Not(u32), assumptions: {Foo(u32)}, env: Env { variables: [], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("trait implied bound", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 92, column: 14, cause: EmptyCollection { expr: "decls.trait_invariants()" } }} }) }}
              0ms DEBUG return=({FailedRule { rule_name_index: Some(("some", 0)), file: "crates/formality-prove/src/prove/prove_wc_list.rs", line: 28, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_wc { goal: Not(u32), assumptions: {Foo(u32)}, env: Env { variables: [], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("trait implied bound", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 92, column: 14, cause: EmptyCollection { expr: "decls.trait_invariants()" } }} }) }}, HasNonCycle(true))
            
            0ms DEBUG return=FailedJudgment { judgment: "prove_wc_list { goal: {Not(u32)}, assumptions: {Foo(u32)}, env: Env { variables: [], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("some", 0)), file: "crates/formality-prove/src/prove/prove_wc_list.rs", line: 28, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_wc { goal: Not(u32), assumptions: {Foo(u32)}, env: Env { variables: [], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("trait implied bound", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 92, column: 14, cause: EmptyCollection { expr: "decls.trait_invariants()" } }} }) }} }
          
          2ms DEBUG result_set=FailedJudgment { judgment: "prove_wc_list { goal: {Not(u32)}, assumptions: {Foo(u32)}, env: Env { variables: [], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("some", 0)), file: "crates/formality-prove/src/prove/prove_wc_list.rs", line: 28, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_wc { goal: Not(u32), assumptions: {Foo(u32)}, env: Env { variables: [], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("trait implied bound", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 92, column: 14, cause: EmptyCollection { expr: "decls.trait_invariants()" } }} }) }} }
        
        2ms DEBUG rule prove_after failed at step 1 because judgment `prove_wc_list { goal: {Not(u32)}, assumptions: {Foo(u32)}, env: Env { variables: [], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }` failed at the following rule(s):
          the rule "some" failed at step #0 (crates/formality-prove/src/prove/prove_wc_list.rs:28:14) because
            judgment `prove_wc { goal: Not(u32), assumptions: {Foo(u32)}, env: Env { variables: [], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }` failed at the following rule(s):
              the rule "trait implied bound" failed at step #0 (crates/formality-prove/src/prove/prove_wc.rs:92:14) because
                expression evaluated to an empty collection: `decls.trait_invariants()` (crates/formality-prove/src/prove/prove_after.rs:19:14)
        2ms DEBUG output={}
      
      new judgment="prove_after { constraints: Constraints { env: Env { variables: [?ty_1], bias: Soundness }, known_true: true, substitution: {?ty_1 => u32} }, goal: {Not(?ty_1)}, assumptions: {Foo(u32)}, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules={FailedRule { rule_name_index: Some(("prove_after", 1)), file: "crates/formality-prove/src/prove/prove_after.rs", line: 19, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_wc_list { goal: {Not(u32)}, assumptions: {Foo(u32)}, env: Env { variables: [], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("some", 0)), file: "crates/formality-prove/src/prove/prove_wc_list.rs", line: 28, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_wc { goal: Not(u32), assumptions: {Foo(u32)}, env: Env { variables: [], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("trait implied bound", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 92, column: 14, cause: EmptyCollection { expr: "decls.trait_invariants()" } }} }) }} }) }}
        strip_cycles failed_rules={FailedRule { rule_name_index: Some(("prove_after", 1)), file: "crates/formality-prove/src/prove/prove_after.rs", line: 19, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_wc_list { goal: {Not(u32)}, assumptions: {Foo(u32)}, env: Env { variables: [], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("some", 0)), file: "crates/formality-prove/src/prove/prove_wc_list.rs", line: 28, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_wc { goal: Not(u32), assumptions: {Foo(u32)}, env: Env { variables: [], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("trait implied bound", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 92, column: 14, cause: EmptyCollection { expr: "decls.trait_invariants()" } }} }) }} }) }}
          failed_rule failed_rule=FailedRule { rule_name_index: Some(("prove_after", 1)), file: "crates/formality-prove/src/prove/prove_after.rs", line: 19, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_wc_list { goal: {Not(u32)}, assumptions: {Foo(u32)}, env: Env { variables: [], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("some", 0)), file: "crates/formality-prove/src/prove/prove_wc_list.rs", line: 28, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_wc { goal: Not(u32), assumptions: {Foo(u32)}, env: Env { variables: [], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("trait implied bound", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 92, column: 14, cause: EmptyCollection { expr: "decls.trait_invariants()" } }} }) }} }) }
            strip_cycles failed_rules={FailedRule { rule_name_index: Some(("some", 0)), file: "crates/formality-prove/src/prove/prove_wc_list.rs", line: 28, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_wc { goal: Not(u32), assumptions: {Foo(u32)}, env: Env { variables: [], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("trait implied bound", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 92, column: 14, cause: EmptyCollection { expr: "decls.trait_invariants()" } }} }) }}
              failed_rule failed_rule=FailedRule { rule_name_index: Some(("some", 0)), file: "crates/formality-prove/src/prove/prove_wc_list.rs", line: 28, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_wc { goal: Not(u32), assumptions: {Foo(u32)}, env: Env { variables: [], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("trait implied bound", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 92, column: 14, cause: EmptyCollection { expr: "decls.trait_invariants()" } }} }) }
                strip_cycles failed_rules={FailedRule { rule_name_index: Some(("trait implied bound", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 92, column: 14, cause: EmptyCollection { expr: "decls.trait_invariants()" } }}
                  failed_rule failed_rule=FailedRule { rule_name_index: Some(("trait implied bound", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 92, column: 14, cause: EmptyCollection { expr: "decls.trait_invariants()" } }
                  
                  0ms DEBUG cycles={}, non_cycles={FailedRule { rule_name_index: Some(("trait implied bound", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 92, column: 14, cause: EmptyCollection { expr: "decls.trait_invariants()" } }}
                  0ms DEBUG return=({FailedRule { rule_name_index: Some(("trait implied bound", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 92, column: 14, cause: EmptyCollection { expr: "decls.trait_invariants()" } }}, HasNonCycle(true))
                
              
              0ms DEBUG cycles={}, non_cycles={FailedRule { rule_name_index: Some(("some", 0)), file: "crates/formality-prove/src/prove/prove_wc_list.rs", line: 28, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_wc { goal: Not(u32), assumptions: {Foo(u32)}, env: Env { variables: [], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("trait implied bound", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 92, column: 14, cause: EmptyCollection { expr: "decls.trait_invariants()" } }} }) }}
              0ms DEBUG return=({FailedRule { rule_name_index: Some(("some", 0)), file: "crates/formality-prove/src/prove/prove_wc_list.rs", line: 28, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_wc { goal: Not(u32), assumptions: {Foo(u32)}, env: Env { variables: [], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("trait implied bound", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 92, column: 14, cause: EmptyCollection { expr: "decls.trait_invariants()" } }} }) }}, HasNonCycle(true))
            
          
          0ms DEBUG cycles={}, non_cycles={FailedRule { rule_name_index: Some(("prove_after", 1)), file: "crates/formality-prove/src/prove/prove_after.rs", line: 19, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_wc_list { goal: {Not(u32)}, assumptions: {Foo(u32)}, env: Env { variables: [], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("some", 0)), file: "crates/formality-prove/src/prove/prove_wc_list.rs", line: 28, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_wc { goal: Not(u32), assumptions: {Foo(u32)}, env: Env { variables: [], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("trait implied bound", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 92, column: 14, cause: EmptyCollection { expr: "decls.trait_invariants()" } }} }) }} }) }}
          0ms DEBUG return=({FailedRule { rule_name_index: Some(("prove_after", 1)), file: "crates/formality-prove/src/prove/prove_after.rs", line: 19, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_wc_list { goal: {Not(u32)}, assumptions: {Foo(u32)}, env: Env { variables: [], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("some", 0)), file: "crates/formality-prove/src/prove/prove_wc_list.rs", line: 28, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_wc { goal: Not(u32), assumptions: {Foo(u32)}, env: Env { variables: [], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("trait implied bound", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 92, column: 14, cause: EmptyCollection { expr: "decls.trait_invariants()" } }} }) }} }) }}, HasNonCycle(true))
        
        0ms DEBUG return=FailedJudgment { judgment: "prove_after { constraints: Constraints { env: Env { variables: [?ty_1], bias: Soundness }, known_true: true, substitution: {?ty_1 => u32} }, goal: {Not(?ty_1)}, assumptions: {Foo(u32)}, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("prove_after", 1)), file: "crates/formality-prove/src/prove/prove_after.rs", line: 19, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_wc_list { goal: {Not(u32)}, assumptions: {Foo(u32)}, env: Env { variables: [], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("some", 0)), file: "crates/formality-prove/src/prove/prove_wc_list.rs", line: 28, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_wc { goal: Not(u32), assumptions: {Foo(u32)}, env: Env { variables: [], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("trait implied bound", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 92, column: 14, cause: EmptyCollection { expr: "decls.trait_invariants()" } }} }) }} }) }} }
      
      19ms DEBUG rule positive impl failed at step 6 because judgment `prove_after { constraints: Constraints { env: Env { variables: [?ty_1], bias: Soundness }, known_true: true, substitution: {?ty_1 => u32} }, goal: {Not(?ty_1)}, assumptions: {Foo(u32)}, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }` failed at the following rule(s):
        the rule "prove_after" failed at step #1 (crates/formality-prove/src/prove/prove_after.rs:19:14) because
          judgment `prove_wc_list { goal: {Not(u32)}, assumptions: {Foo(u32)}, env: Env { variables: [], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }` failed at the following rule(s):
            the rule "some" failed at step #0 (crates/formality-prove/src/prove/prove_wc_list.rs:28:14) because
              judgment `prove_wc { goal: Not(u32), assumptions: {Foo(u32)}, env: Env { variables: [], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }` failed at the following rule(s):
                the rule "trait implied bound" failed at step #0 (crates/formality-prove/src/prove/prove_wc.rs:92:14) because
                  expression evaluated to an empty collection: `decls.trait_invariants()` (crates/formality-prove/src/prove/prove_wc.rs:62:14)
      19ms DEBUG rule trait implied bound failed at step 0 because expression evaluated to an empty collection: `decls.trait_invariants()` (crates/formality-prove/src/prove/prove_wc.rs:92:14)
      19ms DEBUG output={Constraints { env: Env { variables: [], bias: Soundness }, known_true: true, substitution: {} }}
    
    prove_after constraints=Constraints { env: Env { variables: [], bias: Soundness }, known_true: true, substitution: {} }, goal={}, assumptions={}, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
      prove goal={}, assumptions={}, env=Env { variables: [], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
        prove_wc_list goal={}, assumptions={}, env=Env { variables: [], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
          0ms DEBUG produced Constraints { env: Env { variables: [], bias: Soundness }, known_true: true, substitution: {} } from rule "none" in judgment "prove_wc_list"
          0ms DEBUG output={Constraints { env: Env { variables: [], bias: Soundness }, known_true: true, substitution: {} }}
        
        0ms DEBUG result_set={Constraints { env: Env { variables: [], bias: Soundness }, known_true: true, substitution: {} }}
      
      0ms DEBUG produced Constraints { env: Env { variables: [], bias: Soundness }, known_true: true, substitution: {} } from rule "prove_after" in judgment "prove_after"
      0ms DEBUG output={Constraints { env: Env { variables: [], bias: Soundness }, known_true: true, substitution: {} }}
    
    20ms DEBUG produced Constraints { env: Env { variables: [], bias: Soundness }, known_true: true, substitution: {} } from rule "some" in judgment "prove_wc_list"
    20ms DEBUG output={Constraints { env: Env { variables: [], bias: Soundness }, known_true: true, substitution: {} }}
  
  20ms DEBUG result_set={Constraints { env: Env { variables: [], bias: Soundness }, known_true: true, substitution: {} }}

prove_not_goal env=Env { variables: [], bias: Soundness }
  is_definitely_not_proveable 
    0ms DEBUG assumptions={}, data={! Foo(u32)}
    prove goal={! Foo(u32)}, assumptions={}, env=Env { variables: [], bias: Completeness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
      prove_wc_list goal={! Foo(u32)}, assumptions={}, env=Env { variables: [], bias: Completeness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
        prove_wc goal=! Foo(u32), assumptions={}, env=Env { variables: [], bias: Completeness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
          0ms DEBUG rule negative impl failed at step 0 because expression evaluated to an empty collection: `decls.neg_impl_decls(&trait_ref.trait_id)` (crates/formality-prove/src/prove/prove_wc.rs:76:14)
          0ms DEBUG output={}
        
        new judgment="prove_wc { goal: ! Foo(u32), assumptions: {}, env: Env { variables: [], bias: Completeness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules={FailedRule { rule_name_index: Some(("negative impl", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 76, column: 14, cause: EmptyCollection { expr: "decls.neg_impl_decls(&trait_ref.trait_id)" } }}
          strip_cycles failed_rules={FailedRule { rule_name_index: Some(("negative impl", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 76, column: 14, cause: EmptyCollection { expr: "decls.neg_impl_decls(&trait_ref.trait_id)" } }}
            failed_rule failed_rule=FailedRule { rule_name_index: Some(("negative impl", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 76, column: 14, cause: EmptyCollection { expr: "decls.neg_impl_decls(&trait_ref.trait_id)" } }
            
            0ms DEBUG cycles={}, non_cycles={FailedRule { rule_name_index: Some(("negative impl", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 76, column: 14, cause: EmptyCollection { expr: "decls.neg_impl_decls(&trait_ref.trait_id)" } }}
            0ms DEBUG return=({FailedRule { rule_name_index: Some(("negative impl", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 76, column: 14, cause: EmptyCollection { expr: "decls.neg_impl_decls(&trait_ref.trait_id)" } }}, HasNonCycle(true))
          
          0ms DEBUG return=FailedJudgment { judgment: "prove_wc { goal: ! Foo(u32), assumptions: {}, env: Env { variables: [], bias: Completeness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("negative impl", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 76, column: 14, cause: EmptyCollection { expr: "decls.neg_impl_decls(&trait_ref.trait_id)" } }} }
        
        0ms DEBUG rule some failed at step 0 because judgment `prove_wc { goal: ! Foo(u32), assumptions: {}, env: Env { variables: [], bias: Completeness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }` failed at the following rule(s):
          the rule "negative impl" failed at step #0 (crates/formality-prove/src/prove/prove_wc.rs:76:14) because
            expression evaluated to an empty collection: `decls.neg_impl_decls(&trait_ref.trait_id)` (crates/formality-prove/src/prove/prove_wc_list.rs:28:14)
        0ms DEBUG output={}
      
      new judgment="prove_wc_list { goal: {! Foo(u32)}, assumptions: {}, env: Env { variables: [], bias: Completeness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules={FailedRule { rule_name_index: Some(("some", 0)), file: "crates/formality-prove/src/prove/prove_wc_list.rs", line: 28, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_wc { goal: ! Foo(u32), assumptions: {}, env: Env { variables: [], bias: Completeness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("negative impl", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 76, column: 14, cause: EmptyCollection { expr: "decls.neg_impl_decls(&trait_ref.trait_id)" } }} }) }}
        strip_cycles failed_rules={FailedRule { rule_name_index: Some(("some", 0)), file: "crates/formality-prove/src/prove/prove_wc_list.rs", line: 28, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_wc { goal: ! Foo(u32), assumptions: {}, env: Env { variables: [], bias: Completeness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("negative impl", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 76, column: 14, cause: EmptyCollection { expr: "decls.neg_impl_decls(&trait_ref.trait_id)" } }} }) }}
          failed_rule failed_rule=FailedRule { rule_name_index: Some(("some", 0)), file: "crates/formality-prove/src/prove/prove_wc_list.rs", line: 28, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_wc { goal: ! Foo(u32), assumptions: {}, env: Env { variables: [], bias: Completeness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("negative impl", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 76, column: 14, cause: EmptyCollection { expr: "decls.neg_impl_decls(&trait_ref.trait_id)" } }} }) }
            strip_cycles failed_rules={FailedRule { rule_name_index: Some(("negative impl", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 76, column: 14, cause: EmptyCollection { expr: "decls.neg_impl_decls(&trait_ref.trait_id)" } }}
              failed_rule failed_rule=FailedRule { rule_name_index: Some(("negative impl", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 76, column: 14, cause: EmptyCollection { expr: "decls.neg_impl_decls(&trait_ref.trait_id)" } }
              
              0ms DEBUG cycles={}, non_cycles={FailedRule { rule_name_index: Some(("negative impl", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 76, column: 14, cause: EmptyCollection { expr: "decls.neg_impl_decls(&trait_ref.trait_id)" } }}
              0ms DEBUG return=({FailedRule { rule_name_index: Some(("negative impl", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 76, column: 14, cause: EmptyCollection { expr: "decls.neg_impl_decls(&trait_ref.trait_id)" } }}, HasNonCycle(true))
            
          
          0ms DEBUG cycles={}, non_cycles={FailedRule { rule_name_index: Some(("some", 0)), file: "crates/formality-prove/src/prove/prove_wc_list.rs", line: 28, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_wc { goal: ! Foo(u32), assumptions: {}, env: Env { variables: [], bias: Completeness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("negative impl", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 76, column: 14, cause: EmptyCollection { expr: "decls.neg_impl_decls(&trait_ref.trait_id)" } }} }) }}
          0ms DEBUG return=({FailedRule { rule_name_index: Some(("some", 0)), file: "crates/formality-prove/src/prove/prove_wc_list.rs", line: 28, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_wc { goal: ! Foo(u32), assumptions: {}, env: Env { variables: [], bias: Completeness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("negative impl", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 76, column: 14, cause: EmptyCollection { expr: "decls.neg_impl_decls(&trait_ref.trait_id)" } }} }) }}, HasNonCycle(true))
        
        0ms DEBUG return=FailedJudgment { judgment: "prove_wc_list { goal: {! Foo(u32)}, assumptions: {}, env: Env { variables: [], bias: Completeness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("some", 0)), file: "crates/formality-prove/src/prove/prove_wc_list.rs", line: 28, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_wc { goal: ! Foo(u32), assumptions: {}, env: Env { variables: [], bias: Completeness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("negative impl", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 76, column: 14, cause: EmptyCollection { expr: "decls.neg_impl_decls(&trait_ref.trait_id)" } }} }) }} }
      
      1ms DEBUG result_set=FailedJudgment { judgment: "prove_wc_list { goal: {! Foo(u32)}, assumptions: {}, env: Env { variables: [], bias: Completeness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("some", 0)), file: "crates/formality-prove/src/prove/prove_wc_list.rs", line: 28, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_wc { goal: ! Foo(u32), assumptions: {}, env: Env { variables: [], bias: Completeness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("negative impl", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 76, column: 14, cause: EmptyCollection { expr: "decls.neg_impl_decls(&trait_ref.trait_id)" } }} }) }} }
    
    1ms DEBUG Proved `negation_via_failure`, error = judgment `prove_wc_list { goal: {! Foo(u32)}, assumptions: {}, env: Env { variables: [], bias: Completeness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }` failed at the following rule(s):
      the rule "some" failed at step #0 (crates/formality-prove/src/prove/prove_wc_list.rs:28:14) because
        judgment `prove_wc { goal: ! Foo(u32), assumptions: {}, env: Env { variables: [], bias: Completeness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }` failed at the following rule(s):
          the rule "negative impl" failed at step #0 (crates/formality-prove/src/prove/prove_wc.rs:76:14) because
            expression evaluated to an empty collection: `decls.neg_impl_decls(&trait_ref.trait_id)`
  

prove goal={@ WellFormedTraitRef(Not(!ty_0))}, assumptions={Not(!ty_0)}, env=Env { variables: [!ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
  prove_wc_list goal={@ WellFormedTraitRef(Not(!ty_0))}, assumptions={Not(!ty_0)}, env=Env { variables: [!ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
    prove_wc goal=@ WellFormedTraitRef(Not(!ty_0)), assumptions={Not(!ty_0)}, env=Env { variables: [!ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
      prove_via goal=@ WellFormedTraitRef(Not(!ty_0)), via=Not(!ty_0), assumptions={Not(!ty_0)}, env=Env { variables: [!ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
        0ms DEBUG output={}
      
      new judgment="prove_via { goal: @ WellFormedTraitRef(Not(!ty_0)), via: Not(!ty_0), assumptions: {Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules={}
        strip_cycles failed_rules={}
          0ms DEBUG cycles={}, non_cycles={}
          0ms DEBUG return=({}, HasNonCycle(false))
        
        0ms DEBUG return=FailedJudgment { judgment: "prove_via { goal: @ WellFormedTraitRef(Not(!ty_0)), via: Not(!ty_0), assumptions: {Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }
      
      0ms DEBUG rule assumption failed at step 1 because judgment had no applicable rules: `prove_via { goal: @ WellFormedTraitRef(Not(!ty_0)), via: Not(!ty_0), assumptions: {Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }`  (crates/formality-prove/src/prove/prove_wc.rs:44:14)
      prove goal={}, assumptions={Not(!ty_0)}, env=Env { variables: [!ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
        prove_wc_list goal={}, assumptions={Not(!ty_0)}, env=Env { variables: [!ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
          0ms DEBUG produced Constraints { env: Env { variables: [!ty_0], bias: Soundness }, known_true: true, substitution: {} } from rule "none" in judgment "prove_wc_list"
          0ms DEBUG output={Constraints { env: Env { variables: [!ty_0], bias: Soundness }, known_true: true, substitution: {} }}
        
        0ms DEBUG result_set={Constraints { env: Env { variables: [!ty_0], bias: Soundness }, known_true: true, substitution: {} }}
      
      1ms DEBUG produced Constraints { env: Env { variables: [!ty_0], bias: Soundness }, known_true: true, substitution: {} } from rule "trait well formed" in judgment "prove_wc"
      1ms DEBUG output={Constraints { env: Env { variables: [!ty_0], bias: Soundness }, known_true: true, substitution: {} }}
    
    prove_after constraints=Constraints { env: Env { variables: [!ty_0], bias: Soundness }, known_true: true, substitution: {} }, goal={}, assumptions={Not(!ty_0)}, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
      prove goal={}, assumptions={Not(!ty_0)}, env=Env { variables: [!ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
        prove_wc_list goal={}, assumptions={Not(!ty_0)}, env=Env { variables: [!ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
          0ms DEBUG produced Constraints { env: Env { variables: [!ty_0], bias: Soundness }, known_true: true, substitution: {} } from rule "none" in judgment "prove_wc_list"
          0ms DEBUG output={Constraints { env: Env { variables: [!ty_0], bias: Soundness }, known_true: true, substitution: {} }}
        
        0ms DEBUG result_set={Constraints { env: Env { variables: [!ty_0], bias: Soundness }, known_true: true, substitution: {} }}
      
      0ms DEBUG produced Constraints { env: Env { variables: [!ty_0], bias: Soundness }, known_true: true, substitution: {} } from rule "prove_after" in judgment "prove_after"
      0ms DEBUG output={Constraints { env: Env { variables: [!ty_0], bias: Soundness }, known_true: true, substitution: {} }}
    
    2ms DEBUG produced Constraints { env: Env { variables: [!ty_0], bias: Soundness }, known_true: true, substitution: {} } from rule "some" in judgment "prove_wc_list"
    2ms DEBUG output={Constraints { env: Env { variables: [!ty_0], bias: Soundness }, known_true: true, substitution: {} }}
  
  2ms DEBUG result_set={Constraints { env: Env { variables: [!ty_0], bias: Soundness }, known_true: true, substitution: {} }}

prove goal={Foo(!ty_0)}, assumptions={Not(!ty_0)}, env=Env { variables: [!ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
  prove_wc_list goal={Foo(!ty_0)}, assumptions={Not(!ty_0)}, env=Env { variables: [!ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
    prove_wc goal=Foo(!ty_0), assumptions={Not(!ty_0)}, env=Env { variables: [!ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
      prove_via goal=Foo(!ty_0), via=Not(!ty_0), assumptions={Not(!ty_0)}, env=Env { variables: [!ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
        0ms DEBUG output={}
      
      new judgment="prove_via { goal: Foo(!ty_0), via: Not(!ty_0), assumptions: {Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules={}
        strip_cycles failed_rules={}
          0ms DEBUG cycles={}, non_cycles={}
          0ms DEBUG return=({}, HasNonCycle(false))
        
        0ms DEBUG return=FailedJudgment { judgment: "prove_via { goal: Foo(!ty_0), via: Not(!ty_0), assumptions: {Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }
      
      0ms DEBUG rule assumption failed at step 1 because judgment had no applicable rules: `prove_via { goal: Foo(!ty_0), via: Not(!ty_0), assumptions: {Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }`  (crates/formality-prove/src/prove/prove_wc.rs:44:14)
      prove goal={!ty_0 = u32}, assumptions={Foo(!ty_0), Not(!ty_0)}, env=Env { variables: [!ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
        prove_wc_list goal={!ty_0 = u32}, assumptions={Foo(!ty_0), Not(!ty_0)}, env=Env { variables: [!ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
          prove_wc goal=!ty_0 = u32, assumptions={Foo(!ty_0), Not(!ty_0)}, env=Env { variables: [!ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
            prove_via goal=!ty_0 = u32, via=Foo(!ty_0), assumptions={Foo(!ty_0), Not(!ty_0)}, env=Env { variables: [!ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
              0ms DEBUG output={}
            
            new judgment="prove_via { goal: !ty_0 = u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules={}
              strip_cycles failed_rules={}
                0ms DEBUG cycles={}, non_cycles={}
                0ms DEBUG return=({}, HasNonCycle(false))
              
              0ms DEBUG return=FailedJudgment { judgment: "prove_via { goal: !ty_0 = u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }
            
            0ms DEBUG rule assumption failed at step 1 because judgment had no applicable rules: `prove_via { goal: !ty_0 = u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }`  (crates/formality-prove/src/prove/prove_wc.rs:50:14)
            prove_via goal=!ty_0 = u32, via=Not(!ty_0), assumptions={Foo(!ty_0), Not(!ty_0)}, env=Env { variables: [!ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
              0ms DEBUG output={}
            
            new judgment="prove_via { goal: !ty_0 = u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules={}
              strip_cycles failed_rules={}
                0ms DEBUG cycles={}, non_cycles={}
                0ms DEBUG return=({}, HasNonCycle(false))
              
              0ms DEBUG return=FailedJudgment { judgment: "prove_via { goal: !ty_0 = u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }
            
            1ms DEBUG rule assumption failed at step 1 because judgment had no applicable rules: `prove_via { goal: !ty_0 = u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }`  (crates/formality-prove/src/prove/prove_wc.rs:50:14)
            prove_eq a=!ty_0, b=u32, assumptions={Foo(!ty_0), Not(!ty_0)}, env=Env { variables: [!ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
              prove_eq a=u32, b=!ty_0, assumptions={Foo(!ty_0), Not(!ty_0)}, env=Env { variables: [!ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                0ms DEBUG recursive call to prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }, yielding {}
                new judgment="prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules={}
                  strip_cycles failed_rules={}
                    0ms DEBUG cycles={}, non_cycles={}
                    0ms DEBUG return=({}, HasNonCycle(false))
                  
                  0ms DEBUG return=FailedJudgment { judgment: "prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }
                
                0ms DEBUG rule symmetric failed at step 0 because judgment had no applicable rules: `prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }`  (crates/formality-prove/src/prove/prove_eq.rs:38:14)
                prove_normalize p=u32, assumptions={Foo(!ty_0), Not(!ty_0)}, env=Env { variables: [!ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                  prove_normalize_via goal=u32, via=Foo(!ty_0), assumptions={Foo(!ty_0), Not(!ty_0)}, env=Env { variables: [!ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                    0ms DEBUG output={}
                  
                  new judgment="prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules={}
                    strip_cycles failed_rules={}
                      0ms DEBUG cycles={}, non_cycles={}
                      0ms DEBUG return=({}, HasNonCycle(false))
                    
                    0ms DEBUG return=FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }
                  
                  0ms DEBUG rule normalize-via-assumption failed at step 1 because judgment had no applicable rules: `prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }`  (crates/formality-prove/src/prove/prove_normalize.rs:27:14)
                  prove_normalize_via goal=u32, via=Not(!ty_0), assumptions={Foo(!ty_0), Not(!ty_0)}, env=Env { variables: [!ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                    0ms DEBUG output={}
                  
                  new judgment="prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules={}
                    strip_cycles failed_rules={}
                      0ms DEBUG cycles={}, non_cycles={}
                      0ms DEBUG return=({}, HasNonCycle(false))
                    
                    0ms DEBUG return=FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }
                  
                  1ms DEBUG rule normalize-via-assumption failed at step 1 because judgment had no applicable rules: `prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }`  (crates/formality-prove/src/prove/prove_normalize.rs:27:14)
                  1ms DEBUG output={}
                
                new judgment="prove_normalize { p: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules={FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}
                  strip_cycles failed_rules={FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}
                    failed_rule failed_rule=FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }
                      strip_cycles failed_rules={}
                        0ms DEBUG cycles={}, non_cycles={}
                        0ms DEBUG return=({}, HasNonCycle(false))
                      
                    
                    failed_rule failed_rule=FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }
                      strip_cycles failed_rules={}
                        0ms DEBUG cycles={}, non_cycles={}
                        0ms DEBUG return=({}, HasNonCycle(false))
                      
                    
                    0ms DEBUG cycles={FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}, non_cycles={}
                    0ms DEBUG return=({FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}, HasNonCycle(false))
                  
                  0ms DEBUG return=FailedJudgment { judgment: "prove_normalize { p: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }
                
                2ms DEBUG rule normalize-l failed at step 0 because judgment `prove_normalize { p: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }` failed at the following rule(s):
                  the rule "normalize-via-assumption" failed at step #1 (crates/formality-prove/src/prove/prove_normalize.rs:27:14) because
                    judgment had no applicable rules: `prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }`
                  the rule "normalize-via-assumption" failed at step #1 (crates/formality-prove/src/prove/prove_normalize.rs:27:14) because
                    judgment had no applicable rules: `prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }` (crates/formality-prove/src/prove/prove_eq.rs:68:14)
                2ms DEBUG output={}
              
              new judgment="prove_eq { a: u32, b: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules={FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }, FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}
                strip_cycles failed_rules={FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }, FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}
                  failed_rule failed_rule=FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }
                    strip_cycles failed_rules={FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}
                      failed_rule failed_rule=FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }
                        strip_cycles failed_rules={}
                          0ms DEBUG cycles={}, non_cycles={}
                          0ms DEBUG return=({}, HasNonCycle(false))
                        
                      
                      failed_rule failed_rule=FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }
                        strip_cycles failed_rules={}
                          0ms DEBUG cycles={}, non_cycles={}
                          0ms DEBUG return=({}, HasNonCycle(false))
                        
                      
                      0ms DEBUG cycles={FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}, non_cycles={}
                      0ms DEBUG return=({FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}, HasNonCycle(false))
                    
                  
                  failed_rule failed_rule=FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }
                    strip_cycles failed_rules={}
                      0ms DEBUG cycles={}, non_cycles={}
                      0ms DEBUG return=({}, HasNonCycle(false))
                    
                  
                  0ms DEBUG cycles={FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }, FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}, non_cycles={}
                  0ms DEBUG return=({FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }, FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}, HasNonCycle(false))
                
                1ms DEBUG return=FailedJudgment { judgment: "prove_eq { a: u32, b: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }, FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }
              
              3ms DEBUG rule symmetric failed at step 0 because judgment `prove_eq { a: u32, b: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }` failed at the following rule(s):
                the rule "normalize-l" failed at step #0 (crates/formality-prove/src/prove/prove_eq.rs:68:14) because
                  judgment `prove_normalize { p: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }` failed at the following rule(s):
                    the rule "normalize-via-assumption" failed at step #1 (crates/formality-prove/src/prove/prove_normalize.rs:27:14) because
                      judgment had no applicable rules: `prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }`
                    the rule "normalize-via-assumption" failed at step #1 (crates/formality-prove/src/prove/prove_normalize.rs:27:14) because
                      judgment had no applicable rules: `prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }`
                the rule "symmetric" failed at step #0 (crates/formality-prove/src/prove/prove_eq.rs:38:14) because
                  judgment had no applicable rules: `prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }` (crates/formality-prove/src/prove/prove_eq.rs:38:14)
              prove_normalize p=!ty_0, assumptions={Foo(!ty_0), Not(!ty_0)}, env=Env { variables: [!ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                prove_normalize_via goal=!ty_0, via=Foo(!ty_0), assumptions={Foo(!ty_0), Not(!ty_0)}, env=Env { variables: [!ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                  0ms DEBUG output={}
                
                new judgment="prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules={}
                  strip_cycles failed_rules={}
                    0ms DEBUG cycles={}, non_cycles={}
                    0ms DEBUG return=({}, HasNonCycle(false))
                  
                  0ms DEBUG return=FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }
                
                0ms DEBUG rule normalize-via-assumption failed at step 1 because judgment had no applicable rules: `prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }`  (crates/formality-prove/src/prove/prove_normalize.rs:27:14)
                prove_normalize_via goal=!ty_0, via=Not(!ty_0), assumptions={Foo(!ty_0), Not(!ty_0)}, env=Env { variables: [!ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                  0ms DEBUG output={}
                
                new judgment="prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules={}
                  strip_cycles failed_rules={}
                    0ms DEBUG cycles={}, non_cycles={}
                    0ms DEBUG return=({}, HasNonCycle(false))
                  
                  0ms DEBUG return=FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }
                
                1ms DEBUG rule normalize-via-assumption failed at step 1 because judgment had no applicable rules: `prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }`  (crates/formality-prove/src/prove/prove_normalize.rs:27:14)
                1ms DEBUG output={}
              
              new judgment="prove_normalize { p: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules={FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}
                strip_cycles failed_rules={FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}
                  failed_rule failed_rule=FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }
                    strip_cycles failed_rules={}
                      0ms DEBUG cycles={}, non_cycles={}
                      0ms DEBUG return=({}, HasNonCycle(false))
                    
                  
                  failed_rule failed_rule=FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }
                    strip_cycles failed_rules={}
                      0ms DEBUG cycles={}, non_cycles={}
                      0ms DEBUG return=({}, HasNonCycle(false))
                    
                  
                  0ms DEBUG cycles={FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}, non_cycles={}
                  0ms DEBUG return=({FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}, HasNonCycle(false))
                
                0ms DEBUG return=FailedJudgment { judgment: "prove_normalize { p: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }
              
              5ms DEBUG rule normalize-l failed at step 0 because judgment `prove_normalize { p: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }` failed at the following rule(s):
                the rule "normalize-via-assumption" failed at step #1 (crates/formality-prove/src/prove/prove_normalize.rs:27:14) because
                  judgment had no applicable rules: `prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }`
                the rule "normalize-via-assumption" failed at step #1 (crates/formality-prove/src/prove/prove_normalize.rs:27:14) because
                  judgment had no applicable rules: `prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }` (crates/formality-prove/src/prove/prove_eq.rs:68:14)
              5ms DEBUG output={}
            
            new judgment="prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules={FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }, FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_eq { a: u32, b: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }, FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }}
              strip_cycles failed_rules={FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }, FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_eq { a: u32, b: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }, FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }}
                failed_rule failed_rule=FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }
                  strip_cycles failed_rules={FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}
                    failed_rule failed_rule=FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }
                      strip_cycles failed_rules={}
                        0ms DEBUG cycles={}, non_cycles={}
                        0ms DEBUG return=({}, HasNonCycle(false))
                      
                    
                    failed_rule failed_rule=FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }
                      strip_cycles failed_rules={}
                        0ms DEBUG cycles={}, non_cycles={}
                        0ms DEBUG return=({}, HasNonCycle(false))
                      
                    
                    0ms DEBUG cycles={FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}, non_cycles={}
                    0ms DEBUG return=({FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}, HasNonCycle(false))
                  
                
                failed_rule failed_rule=FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_eq { a: u32, b: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }, FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }
                  strip_cycles failed_rules={FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }, FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}
                    failed_rule failed_rule=FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }
                      strip_cycles failed_rules={FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}
                        failed_rule failed_rule=FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }
                          strip_cycles failed_rules={}
                            0ms DEBUG cycles={}, non_cycles={}
                            0ms DEBUG return=({}, HasNonCycle(false))
                          
                        
                        failed_rule failed_rule=FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }
                          strip_cycles failed_rules={}
                            0ms DEBUG cycles={}, non_cycles={}
                            0ms DEBUG return=({}, HasNonCycle(false))
                          
                        
                        0ms DEBUG cycles={FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}, non_cycles={}
                        0ms DEBUG return=({FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}, HasNonCycle(false))
                      
                    
                    failed_rule failed_rule=FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }
                    
                    0ms DEBUG cycles={FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }, FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: Cycle { judgment: "prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }" } }}, non_cycles={}
                    0ms DEBUG return=({FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }, FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: Cycle { judgment: "prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }" } }}, HasNonCycle(false))
                  
                
                1ms DEBUG cycles={FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }, FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_eq { a: u32, b: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }, FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: Cycle { judgment: "prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }" } }} }) }}, non_cycles={}
                1ms DEBUG return=({FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }, FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_eq { a: u32, b: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }, FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: Cycle { judgment: "prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }" } }} }) }}, HasNonCycle(false))
              
              1ms DEBUG return=FailedJudgment { judgment: "prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }, FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_eq { a: u32, b: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }, FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: Cycle { judgment: "prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }" } }} }) }} }
            
            9ms DEBUG rule eq failed at step 0 because judgment `prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }` failed at the following rule(s):
              the rule "normalize-l" failed at step #0 (crates/formality-prove/src/prove/prove_eq.rs:68:14) because
                judgment `prove_normalize { p: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }` failed at the following rule(s):
                  the rule "normalize-via-assumption" failed at step #1 (crates/formality-prove/src/prove/prove_normalize.rs:27:14) because
                    judgment had no applicable rules: `prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }`
                  the rule "normalize-via-assumption" failed at step #1 (crates/formality-prove/src/prove/prove_normalize.rs:27:14) because
                    judgment had no applicable rules: `prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }`
              the rule "symmetric" failed at step #0 (crates/formality-prove/src/prove/prove_eq.rs:38:14) because
                judgment `prove_eq { a: u32, b: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }` failed at the following rule(s):
                  the rule "normalize-l" failed at step #0 (crates/formality-prove/src/prove/prove_eq.rs:68:14) because
                    judgment `prove_normalize { p: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }` failed at the following rule(s):
                      the rule "normalize-via-assumption" failed at step #1 (crates/formality-prove/src/prove/prove_normalize.rs:27:14) because
                        judgment had no applicable rules: `prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }`
                      the rule "normalize-via-assumption" failed at step #1 (crates/formality-prove/src/prove/prove_normalize.rs:27:14) because
                        judgment had no applicable rules: `prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }`
                  the rule "symmetric" failed at step #0 (crates/formality-prove/src/prove/prove_eq.rs:38:14) because
                    cyclic proof attempt: `prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }` (crates/formality-prove/src/prove/prove_wc.rs:102:14)
            9ms DEBUG output={}
          
          new judgment="prove_wc { goal: !ty_0 = u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules={FailedRule { rule_name_index: Some(("assumption", 1)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 50, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_via { goal: !ty_0 = u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("assumption", 1)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 50, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_via { goal: !ty_0 = u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("eq", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 102, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }, FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_eq { a: u32, b: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }, FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: Cycle { judgment: "prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }" } }} }) }} }) }}
            strip_cycles failed_rules={FailedRule { rule_name_index: Some(("assumption", 1)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 50, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_via { goal: !ty_0 = u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("assumption", 1)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 50, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_via { goal: !ty_0 = u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("eq", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 102, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }, FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_eq { a: u32, b: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }, FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: Cycle { judgment: "prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }" } }} }) }} }) }}
              failed_rule failed_rule=FailedRule { rule_name_index: Some(("assumption", 1)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 50, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_via { goal: !ty_0 = u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }
                strip_cycles failed_rules={}
                  0ms DEBUG cycles={}, non_cycles={}
                  0ms DEBUG return=({}, HasNonCycle(false))
                
              
              failed_rule failed_rule=FailedRule { rule_name_index: Some(("assumption", 1)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 50, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_via { goal: !ty_0 = u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }
                strip_cycles failed_rules={}
                  0ms DEBUG cycles={}, non_cycles={}
                  0ms DEBUG return=({}, HasNonCycle(false))
                
              
              failed_rule failed_rule=FailedRule { rule_name_index: Some(("eq", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 102, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }, FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_eq { a: u32, b: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }, FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: Cycle { judgment: "prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }" } }} }) }} }) }
                strip_cycles failed_rules={FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }, FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_eq { a: u32, b: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }, FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: Cycle { judgment: "prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }" } }} }) }}
                  failed_rule failed_rule=FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }
                    strip_cycles failed_rules={FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}
                      failed_rule failed_rule=FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }
                        strip_cycles failed_rules={}
                          0ms DEBUG cycles={}, non_cycles={}
                          0ms DEBUG return=({}, HasNonCycle(false))
                        
                      
                      failed_rule failed_rule=FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }
                        strip_cycles failed_rules={}
                          0ms DEBUG cycles={}, non_cycles={}
                          0ms DEBUG return=({}, HasNonCycle(false))
                        
                      
                      0ms DEBUG cycles={FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}, non_cycles={}
                      0ms DEBUG return=({FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}, HasNonCycle(false))
                    
                  
                  failed_rule failed_rule=FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_eq { a: u32, b: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }, FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: Cycle { judgment: "prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }" } }} }) }
                    strip_cycles failed_rules={FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }, FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: Cycle { judgment: "prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }" } }}
                      failed_rule failed_rule=FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }
                        strip_cycles failed_rules={FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}
                          failed_rule failed_rule=FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }
                            strip_cycles failed_rules={}
                              0ms DEBUG cycles={}, non_cycles={}
                              0ms DEBUG return=({}, HasNonCycle(false))
                            
                          
                          failed_rule failed_rule=FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }
                            strip_cycles failed_rules={}
                              0ms DEBUG cycles={}, non_cycles={}
                              0ms DEBUG return=({}, HasNonCycle(false))
                            
                          
                          0ms DEBUG cycles={FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}, non_cycles={}
                          0ms DEBUG return=({FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}, HasNonCycle(false))
                        
                      
                      failed_rule failed_rule=FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: Cycle { judgment: "prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }" } }
                      
                      0ms DEBUG cycles={FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }, FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: Cycle { judgment: "prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }" } }}, non_cycles={}
                      0ms DEBUG return=({FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }, FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: Cycle { judgment: "prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }" } }}, HasNonCycle(false))
                    
                  
                  1ms DEBUG cycles={FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }, FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_eq { a: u32, b: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }, FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: Cycle { judgment: "prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }" } }} }) }}, non_cycles={}
                  1ms DEBUG return=({FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }, FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_eq { a: u32, b: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }, FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: Cycle { judgment: "prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }" } }} }) }}, HasNonCycle(false))
                
              
              2ms DEBUG cycles={FailedRule { rule_name_index: Some(("assumption", 1)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 50, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_via { goal: !ty_0 = u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("assumption", 1)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 50, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_via { goal: !ty_0 = u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("eq", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 102, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }, FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_eq { a: u32, b: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }, FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: Cycle { judgment: "prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }" } }} }) }} }) }}, non_cycles={}
              2ms DEBUG return=({FailedRule { rule_name_index: Some(("assumption", 1)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 50, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_via { goal: !ty_0 = u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("assumption", 1)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 50, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_via { goal: !ty_0 = u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("eq", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 102, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }, FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_eq { a: u32, b: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }, FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: Cycle { judgment: "prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }" } }} }) }} }) }}, HasNonCycle(false))
            
            2ms DEBUG return=FailedJudgment { judgment: "prove_wc { goal: !ty_0 = u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("assumption", 1)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 50, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_via { goal: !ty_0 = u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("assumption", 1)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 50, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_via { goal: !ty_0 = u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("eq", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 102, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }, FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_eq { a: u32, b: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }, FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: Cycle { judgment: "prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }" } }} }) }} }) }} }
          
          12ms DEBUG rule some failed at step 0 because judgment `prove_wc { goal: !ty_0 = u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }` failed at the following rule(s):
            the rule "assumption" failed at step #1 (crates/formality-prove/src/prove/prove_wc.rs:50:14) because
              judgment had no applicable rules: `prove_via { goal: !ty_0 = u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }`
            the rule "assumption" failed at step #1 (crates/formality-prove/src/prove/prove_wc.rs:50:14) because
              judgment had no applicable rules: `prove_via { goal: !ty_0 = u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }`
            the rule "eq" failed at step #0 (crates/formality-prove/src/prove/prove_wc.rs:102:14) because
              judgment `prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }` failed at the following rule(s):
                the rule "normalize-l" failed at step #0 (crates/formality-prove/src/prove/prove_eq.rs:68:14) because
                  judgment `prove_normalize { p: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }` failed at the following rule(s):
                    the rule "normalize-via-assumption" failed at step #1 (crates/formality-prove/src/prove/prove_normalize.rs:27:14) because
                      judgment had no applicable rules: `prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }`
                    the rule "normalize-via-assumption" failed at step #1 (crates/formality-prove/src/prove/prove_normalize.rs:27:14) because
                      judgment had no applicable rules: `prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }`
                the rule "symmetric" failed at step #0 (crates/formality-prove/src/prove/prove_eq.rs:38:14) because
                  judgment `prove_eq { a: u32, b: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }` failed at the following rule(s):
                    the rule "normalize-l" failed at step #0 (crates/formality-prove/src/prove/prove_eq.rs:68:14) because
                      judgment `prove_normalize { p: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }` failed at the following rule(s):
                        the rule "normalize-via-assumption" failed at step #1 (crates/formality-prove/src/prove/prove_normalize.rs:27:14) because
                          judgment had no applicable rules: `prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }`
                        the rule "normalize-via-assumption" failed at step #1 (crates/formality-prove/src/prove/prove_normalize.rs:27:14) because
                          judgment had no applicable rules: `prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }`
                    the rule "symmetric" failed at step #0 (crates/formality-prove/src/prove/prove_eq.rs:38:14) because
                      cyclic proof attempt: `prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }` (crates/formality-prove/src/prove/prove_wc_list.rs:28:14)
          12ms DEBUG output={}
        
        new judgment="prove_wc_list { goal: {!ty_0 = u32}, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules={FailedRule { rule_name_index: Some(("some", 0)), file: "crates/formality-prove/src/prove/prove_wc_list.rs", line: 28, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_wc { goal: !ty_0 = u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("assumption", 1)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 50, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_via { goal: !ty_0 = u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("assumption", 1)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 50, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_via { goal: !ty_0 = u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("eq", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 102, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }, FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_eq { a: u32, b: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }, FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: Cycle { judgment: "prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }" } }} }) }} }) }} }) }}
          strip_cycles failed_rules={FailedRule { rule_name_index: Some(("some", 0)), file: "crates/formality-prove/src/prove/prove_wc_list.rs", line: 28, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_wc { goal: !ty_0 = u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("assumption", 1)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 50, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_via { goal: !ty_0 = u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("assumption", 1)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 50, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_via { goal: !ty_0 = u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("eq", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 102, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }, FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_eq { a: u32, b: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }, FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: Cycle { judgment: "prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }" } }} }) }} }) }} }) }}
            failed_rule failed_rule=FailedRule { rule_name_index: Some(("some", 0)), file: "crates/formality-prove/src/prove/prove_wc_list.rs", line: 28, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_wc { goal: !ty_0 = u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("assumption", 1)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 50, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_via { goal: !ty_0 = u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("assumption", 1)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 50, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_via { goal: !ty_0 = u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("eq", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 102, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }, FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_eq { a: u32, b: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }, FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: Cycle { judgment: "prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }" } }} }) }} }) }} }) }
              strip_cycles failed_rules={FailedRule { rule_name_index: Some(("assumption", 1)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 50, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_via { goal: !ty_0 = u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("assumption", 1)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 50, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_via { goal: !ty_0 = u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("eq", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 102, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }, FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_eq { a: u32, b: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }, FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: Cycle { judgment: "prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }" } }} }) }} }) }}
                failed_rule failed_rule=FailedRule { rule_name_index: Some(("assumption", 1)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 50, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_via { goal: !ty_0 = u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }
                  strip_cycles failed_rules={}
                    0ms DEBUG cycles={}, non_cycles={}
                    0ms DEBUG return=({}, HasNonCycle(false))
                  
                
                failed_rule failed_rule=FailedRule { rule_name_index: Some(("assumption", 1)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 50, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_via { goal: !ty_0 = u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }
                  strip_cycles failed_rules={}
                    0ms DEBUG cycles={}, non_cycles={}
                    0ms DEBUG return=({}, HasNonCycle(false))
                  
                
                failed_rule failed_rule=FailedRule { rule_name_index: Some(("eq", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 102, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }, FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_eq { a: u32, b: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }, FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: Cycle { judgment: "prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }" } }} }) }} }) }
                  strip_cycles failed_rules={FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }, FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_eq { a: u32, b: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }, FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: Cycle { judgment: "prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }" } }} }) }}
                    failed_rule failed_rule=FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }
                      strip_cycles failed_rules={FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}
                        failed_rule failed_rule=FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }
                          strip_cycles failed_rules={}
                            0ms DEBUG cycles={}, non_cycles={}
                            0ms DEBUG return=({}, HasNonCycle(false))
                          
                        
                        failed_rule failed_rule=FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }
                          strip_cycles failed_rules={}
                            0ms DEBUG cycles={}, non_cycles={}
                            0ms DEBUG return=({}, HasNonCycle(false))
                          
                        
                        0ms DEBUG cycles={FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}, non_cycles={}
                        0ms DEBUG return=({FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}, HasNonCycle(false))
                      
                    
                    failed_rule failed_rule=FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_eq { a: u32, b: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }, FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: Cycle { judgment: "prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }" } }} }) }
                      strip_cycles failed_rules={FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }, FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: Cycle { judgment: "prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }" } }}
                        failed_rule failed_rule=FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }
                          strip_cycles failed_rules={FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}
                            failed_rule failed_rule=FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }
                              strip_cycles failed_rules={}
                                0ms DEBUG cycles={}, non_cycles={}
                                0ms DEBUG return=({}, HasNonCycle(false))
                              
                            
                            failed_rule failed_rule=FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }
                              strip_cycles failed_rules={}
                                0ms DEBUG cycles={}, non_cycles={}
                                0ms DEBUG return=({}, HasNonCycle(false))
                              
                            
                            0ms DEBUG cycles={FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}, non_cycles={}
                            0ms DEBUG return=({FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}, HasNonCycle(false))
                          
                        
                        failed_rule failed_rule=FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: Cycle { judgment: "prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }" } }
                        
                        0ms DEBUG cycles={FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }, FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: Cycle { judgment: "prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }" } }}, non_cycles={}
                        0ms DEBUG return=({FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }, FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: Cycle { judgment: "prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }" } }}, HasNonCycle(false))
                      
                    
                    1ms DEBUG cycles={FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }, FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_eq { a: u32, b: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }, FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: Cycle { judgment: "prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }" } }} }) }}, non_cycles={}
                    1ms DEBUG return=({FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }, FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_eq { a: u32, b: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }, FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: Cycle { judgment: "prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }" } }} }) }}, HasNonCycle(false))
                  
                
                2ms DEBUG cycles={FailedRule { rule_name_index: Some(("assumption", 1)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 50, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_via { goal: !ty_0 = u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("assumption", 1)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 50, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_via { goal: !ty_0 = u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("eq", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 102, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }, FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_eq { a: u32, b: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }, FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: Cycle { judgment: "prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }" } }} }) }} }) }}, non_cycles={}
                2ms DEBUG return=({FailedRule { rule_name_index: Some(("assumption", 1)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 50, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_via { goal: !ty_0 = u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("assumption", 1)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 50, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_via { goal: !ty_0 = u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("eq", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 102, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }, FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_eq { a: u32, b: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }, FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: Cycle { judgment: "prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }" } }} }) }} }) }}, HasNonCycle(false))
              
            
            2ms DEBUG cycles={FailedRule { rule_name_index: Some(("some", 0)), file: "crates/formality-prove/src/prove/prove_wc_list.rs", line: 28, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_wc { goal: !ty_0 = u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("assumption", 1)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 50, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_via { goal: !ty_0 = u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("assumption", 1)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 50, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_via { goal: !ty_0 = u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("eq", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 102, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }, FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_eq { a: u32, b: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }, FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: Cycle { judgment: "prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }" } }} }) }} }) }} }) }}, non_cycles={}
            2ms DEBUG return=({FailedRule { rule_name_index: Some(("some", 0)), file: "crates/formality-prove/src/prove/prove_wc_list.rs", line: 28, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_wc { goal: !ty_0 = u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("assumption", 1)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 50, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_via { goal: !ty_0 = u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("assumption", 1)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 50, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_via { goal: !ty_0 = u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("eq", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 102, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }, FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_eq { a: u32, b: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }, FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: Cycle { judgment: "prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }" } }} }) }} }) }} }) }}, HasNonCycle(false))
          
          2ms DEBUG return=FailedJudgment { judgment: "prove_wc_list { goal: {!ty_0 = u32}, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("some", 0)), file: "crates/formality-prove/src/prove/prove_wc_list.rs", line: 28, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_wc { goal: !ty_0 = u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("assumption", 1)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 50, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_via { goal: !ty_0 = u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("assumption", 1)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 50, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_via { goal: !ty_0 = u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("eq", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 102, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }, FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_eq { a: u32, b: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }, FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: Cycle { judgment: "prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }" } }} }) }} }) }} }) }} }
        
        15ms DEBUG result_set=FailedJudgment { judgment: "prove_wc_list { goal: {!ty_0 = u32}, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("some", 0)), file: "crates/formality-prove/src/prove/prove_wc_list.rs", line: 28, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_wc { goal: !ty_0 = u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("assumption", 1)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 50, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_via { goal: !ty_0 = u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("assumption", 1)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 50, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_via { goal: !ty_0 = u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("eq", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 102, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }, FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_eq { a: u32, b: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-l", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 68, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }, FailedRule { rule_name_index: Some(("symmetric", 0)), file: "crates/formality-prove/src/prove/prove_eq.rs", line: 38, column: 14, cause: Cycle { judgment: "prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }" } }} }) }} }) }} }) }} }
      
      16ms DEBUG rule positive impl failed at step 5 because judgment `prove_wc_list { goal: {!ty_0 = u32}, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }` failed at the following rule(s):
        the rule "some" failed at step #0 (crates/formality-prove/src/prove/prove_wc_list.rs:28:14) because
          judgment `prove_wc { goal: !ty_0 = u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }` failed at the following rule(s):
            the rule "assumption" failed at step #1 (crates/formality-prove/src/prove/prove_wc.rs:50:14) because
              judgment had no applicable rules: `prove_via { goal: !ty_0 = u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }`
            the rule "assumption" failed at step #1 (crates/formality-prove/src/prove/prove_wc.rs:50:14) because
              judgment had no applicable rules: `prove_via { goal: !ty_0 = u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }`
            the rule "eq" failed at step #0 (crates/formality-prove/src/prove/prove_wc.rs:102:14) because
              judgment `prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }` failed at the following rule(s):
                the rule "normalize-l" failed at step #0 (crates/formality-prove/src/prove/prove_eq.rs:68:14) because
                  judgment `prove_normalize { p: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }` failed at the following rule(s):
                    the rule "normalize-via-assumption" failed at step #1 (crates/formality-prove/src/prove/prove_normalize.rs:27:14) because
                      judgment had no applicable rules: `prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }`
                    the rule "normalize-via-assumption" failed at step #1 (crates/formality-prove/src/prove/prove_normalize.rs:27:14) because
                      judgment had no applicable rules: `prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }`
                the rule "symmetric" failed at step #0 (crates/formality-prove/src/prove/prove_eq.rs:38:14) because
                  judgment `prove_eq { a: u32, b: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }` failed at the following rule(s):
                    the rule "normalize-l" failed at step #0 (crates/formality-prove/src/prove/prove_eq.rs:68:14) because
                      judgment `prove_normalize { p: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }` failed at the following rule(s):
                        the rule "normalize-via-assumption" failed at step #1 (crates/formality-prove/src/prove/prove_normalize.rs:27:14) because
                          judgment had no applicable rules: `prove_normalize_via { goal: u32, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }`
                        the rule "normalize-via-assumption" failed at step #1 (crates/formality-prove/src/prove/prove_normalize.rs:27:14) because
                          judgment had no applicable rules: `prove_normalize_via { goal: u32, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }`
                    the rule "symmetric" failed at step #0 (crates/formality-prove/src/prove/prove_eq.rs:38:14) because
                      cyclic proof attempt: `prove_eq { a: !ty_0, b: u32, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }` (crates/formality-prove/src/prove/prove_wc.rs:61:14)
      prove goal={!ty_0 = ?ty_1}, assumptions={Foo(!ty_0), Not(!ty_0)}, env=Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
        prove_wc_list goal={!ty_0 = ?ty_1}, assumptions={Foo(!ty_0), Not(!ty_0)}, env=Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
          prove_wc goal=!ty_0 = ?ty_1, assumptions={Foo(!ty_0), Not(!ty_0)}, env=Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
            prove_via goal=!ty_0 = ?ty_1, via=Foo(!ty_0), assumptions={Foo(!ty_0), Not(!ty_0)}, env=Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
              0ms DEBUG output={}
            
            new judgment="prove_via { goal: !ty_0 = ?ty_1, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules={}
              strip_cycles failed_rules={}
                0ms DEBUG cycles={}, non_cycles={}
                0ms DEBUG return=({}, HasNonCycle(false))
              
              0ms DEBUG return=FailedJudgment { judgment: "prove_via { goal: !ty_0 = ?ty_1, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }
            
            0ms DEBUG rule assumption failed at step 1 because judgment had no applicable rules: `prove_via { goal: !ty_0 = ?ty_1, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }`  (crates/formality-prove/src/prove/prove_wc.rs:50:14)
            prove_via goal=!ty_0 = ?ty_1, via=Not(!ty_0), assumptions={Foo(!ty_0), Not(!ty_0)}, env=Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
              0ms DEBUG output={}
            
            new judgment="prove_via { goal: !ty_0 = ?ty_1, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules={}
              strip_cycles failed_rules={}
                0ms DEBUG cycles={}, non_cycles={}
                0ms DEBUG return=({}, HasNonCycle(false))
              
              0ms DEBUG return=FailedJudgment { judgment: "prove_via { goal: !ty_0 = ?ty_1, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }
            
            1ms DEBUG rule assumption failed at step 1 because judgment had no applicable rules: `prove_via { goal: !ty_0 = ?ty_1, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }`  (crates/formality-prove/src/prove/prove_wc.rs:50:14)
            prove_eq a=!ty_0, b=?ty_1, assumptions={Foo(!ty_0), Not(!ty_0)}, env=Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
              prove_eq a=?ty_1, b=!ty_0, assumptions={Foo(!ty_0), Not(!ty_0)}, env=Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                0ms DEBUG recursive call to prove_eq { a: !ty_0, b: ?ty_1, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }, yielding {}
                new judgment="prove_eq { a: !ty_0, b: ?ty_1, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules={}
                  strip_cycles failed_rules={}
                    0ms DEBUG cycles={}, non_cycles={}
                    0ms DEBUG return=({}, HasNonCycle(false))
                  
                  0ms DEBUG return=FailedJudgment { judgment: "prove_eq { a: !ty_0, b: ?ty_1, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }
                
                0ms DEBUG rule symmetric failed at step 0 because judgment had no applicable rules: `prove_eq { a: !ty_0, b: ?ty_1, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }`  (crates/formality-prove/src/prove/prove_eq.rs:38:14)
                prove_existential_var_eq v=?ty_1, b=!ty_0, assumptions={Foo(!ty_0), Not(!ty_0)}, env=Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                  0ms DEBUG rule existential-nonvar failed at step 0 because pattern `None` did not match value `Some(!ty_0)` (crates/formality-prove/src/prove/prove_eq.rs:87:28)
                  0ms DEBUG produced Constraints { env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, known_true: true, substitution: {?ty_1 => !ty_0} } from rule "existential-universal" in judgment "prove_existential_var_eq"
                  0ms DEBUG output={Constraints { env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, known_true: true, substitution: {?ty_1 => !ty_0} }}
                
                0ms DEBUG produced Constraints { env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, known_true: true, substitution: {?ty_1 => !ty_0} } from rule "existential" in judgment "prove_eq"
                prove_normalize p=?ty_1, assumptions={Foo(!ty_0), Not(!ty_0)}, env=Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                  prove_normalize_via goal=?ty_1, via=Foo(!ty_0), assumptions={Foo(!ty_0), Not(!ty_0)}, env=Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                    0ms DEBUG output={}
                  
                  new judgment="prove_normalize_via { goal: ?ty_1, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules={}
                    strip_cycles failed_rules={}
                      0ms DEBUG cycles={}, non_cycles={}
                      0ms DEBUG return=({}, HasNonCycle(false))
                    
                    0ms DEBUG return=FailedJudgment { judgment: "prove_normalize_via { goal: ?ty_1, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }
                  
                  0ms DEBUG rule normalize-via-assumption failed at step 1 because judgment had no applicable rules: `prove_normalize_via { goal: ?ty_1, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }`  (crates/formality-prove/src/prove/prove_normalize.rs:27:14)
                  prove_normalize_via goal=?ty_1, via=Not(!ty_0), assumptions={Foo(!ty_0), Not(!ty_0)}, env=Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                    0ms DEBUG output={}
                  
                  new judgment="prove_normalize_via { goal: ?ty_1, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules={}
                    strip_cycles failed_rules={}
                      0ms DEBUG cycles={}, non_cycles={}
                      0ms DEBUG return=({}, HasNonCycle(false))
                    
                    0ms DEBUG return=FailedJudgment { judgment: "prove_normalize_via { goal: ?ty_1, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }
                  
                  1ms DEBUG rule normalize-via-assumption failed at step 1 because judgment had no applicable rules: `prove_normalize_via { goal: ?ty_1, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }`  (crates/formality-prove/src/prove/prove_normalize.rs:27:14)
                  1ms DEBUG output={}
                
                new judgment="prove_normalize { p: ?ty_1, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules={FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: ?ty_1, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: ?ty_1, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}
                  strip_cycles failed_rules={FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: ?ty_1, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: ?ty_1, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}
                    failed_rule failed_rule=FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: ?ty_1, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }
                      strip_cycles failed_rules={}
                        0ms DEBUG cycles={}, non_cycles={}
                        0ms DEBUG return=({}, HasNonCycle(false))
                      
                    
                    failed_rule failed_rule=FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: ?ty_1, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }
                      strip_cycles failed_rules={}
                        0ms DEBUG cycles={}, non_cycles={}
                        0ms DEBUG return=({}, HasNonCycle(false))
                      
                    
                    0ms DEBUG cycles={FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: ?ty_1, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: ?ty_1, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}, non_cycles={}
                    0ms DEBUG return=({FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: ?ty_1, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: ?ty_1, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}, HasNonCycle(false))
                  
                  0ms DEBUG return=FailedJudgment { judgment: "prove_normalize { p: ?ty_1, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: ?ty_1, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: ?ty_1, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }
                
                2ms DEBUG rule normalize-l failed at step 0 because judgment `prove_normalize { p: ?ty_1, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }` failed at the following rule(s):
                  the rule "normalize-via-assumption" failed at step #1 (crates/formality-prove/src/prove/prove_normalize.rs:27:14) because
                    judgment had no applicable rules: `prove_normalize_via { goal: ?ty_1, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }`
                  the rule "normalize-via-assumption" failed at step #1 (crates/formality-prove/src/prove/prove_normalize.rs:27:14) because
                    judgment had no applicable rules: `prove_normalize_via { goal: ?ty_1, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }` (crates/formality-prove/src/prove/prove_eq.rs:68:14)
                2ms DEBUG output={Constraints { env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, known_true: true, substitution: {?ty_1 => !ty_0} }}
              
              3ms DEBUG produced Constraints { env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, known_true: true, substitution: {?ty_1 => !ty_0} } from rule "symmetric" in judgment "prove_eq"
              prove_normalize p=!ty_0, assumptions={Foo(!ty_0), Not(!ty_0)}, env=Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                prove_normalize_via goal=!ty_0, via=Foo(!ty_0), assumptions={Foo(!ty_0), Not(!ty_0)}, env=Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                  0ms DEBUG output={}
                
                new judgment="prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules={}
                  strip_cycles failed_rules={}
                    0ms DEBUG cycles={}, non_cycles={}
                    0ms DEBUG return=({}, HasNonCycle(false))
                  
                  0ms DEBUG return=FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }
                
                0ms DEBUG rule normalize-via-assumption failed at step 1 because judgment had no applicable rules: `prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }`  (crates/formality-prove/src/prove/prove_normalize.rs:27:14)
                prove_normalize_via goal=!ty_0, via=Not(!ty_0), assumptions={Foo(!ty_0), Not(!ty_0)}, env=Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                  0ms DEBUG output={}
                
                new judgment="prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules={}
                  strip_cycles failed_rules={}
                    0ms DEBUG cycles={}, non_cycles={}
                    0ms DEBUG return=({}, HasNonCycle(false))
                  
                  0ms DEBUG return=FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }
                
                1ms DEBUG rule normalize-via-assumption failed at step 1 because judgment had no applicable rules: `prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }`  (crates/formality-prove/src/prove/prove_normalize.rs:27:14)
                1ms DEBUG output={}
              
              new judgment="prove_normalize { p: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules={FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}
                strip_cycles failed_rules={FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}
                  failed_rule failed_rule=FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }
                    strip_cycles failed_rules={}
                      0ms DEBUG cycles={}, non_cycles={}
                      0ms DEBUG return=({}, HasNonCycle(false))
                    
                  
                  failed_rule failed_rule=FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }
                    strip_cycles failed_rules={}
                      0ms DEBUG cycles={}, non_cycles={}
                      0ms DEBUG return=({}, HasNonCycle(false))
                    
                  
                  0ms DEBUG cycles={FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}, non_cycles={}
                  0ms DEBUG return=({FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}, HasNonCycle(false))
                
                0ms DEBUG return=FailedJudgment { judgment: "prove_normalize { p: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }
              
              5ms DEBUG rule normalize-l failed at step 0 because judgment `prove_normalize { p: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }` failed at the following rule(s):
                the rule "normalize-via-assumption" failed at step #1 (crates/formality-prove/src/prove/prove_normalize.rs:27:14) because
                  judgment had no applicable rules: `prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }`
                the rule "normalize-via-assumption" failed at step #1 (crates/formality-prove/src/prove/prove_normalize.rs:27:14) because
                  judgment had no applicable rules: `prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }` (crates/formality-prove/src/prove/prove_eq.rs:68:14)
              5ms DEBUG output={Constraints { env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, known_true: true, substitution: {?ty_1 => !ty_0} }}
              5ms DEBUG output is different from previous iteration, re-executing until fixed point is reached
            
            prove_eq a=!ty_0, b=?ty_1, assumptions={Foo(!ty_0), Not(!ty_0)}, env=Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
              prove_eq a=?ty_1, b=!ty_0, assumptions={Foo(!ty_0), Not(!ty_0)}, env=Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                0ms DEBUG recursive call to prove_eq { a: !ty_0, b: ?ty_1, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }, yielding {Constraints { env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, known_true: true, substitution: {?ty_1 => !ty_0} }}
                0ms DEBUG produced Constraints { env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, known_true: true, substitution: {?ty_1 => !ty_0} } from rule "symmetric" in judgment "prove_eq"
                prove_existential_var_eq v=?ty_1, b=!ty_0, assumptions={Foo(!ty_0), Not(!ty_0)}, env=Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                  0ms DEBUG rule existential-nonvar failed at step 0 because pattern `None` did not match value `Some(!ty_0)` (crates/formality-prove/src/prove/prove_eq.rs:87:28)
                  0ms DEBUG produced Constraints { env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, known_true: true, substitution: {?ty_1 => !ty_0} } from rule "existential-universal" in judgment "prove_existential_var_eq"
                  0ms DEBUG output={Constraints { env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, known_true: true, substitution: {?ty_1 => !ty_0} }}
                
                0ms DEBUG produced Constraints { env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, known_true: true, substitution: {?ty_1 => !ty_0} } from rule "existential" in judgment "prove_eq"
                prove_normalize p=?ty_1, assumptions={Foo(!ty_0), Not(!ty_0)}, env=Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                  prove_normalize_via goal=?ty_1, via=Foo(!ty_0), assumptions={Foo(!ty_0), Not(!ty_0)}, env=Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                    0ms DEBUG output={}
                  
                  new judgment="prove_normalize_via { goal: ?ty_1, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules={}
                    strip_cycles failed_rules={}
                      0ms DEBUG cycles={}, non_cycles={}
                      0ms DEBUG return=({}, HasNonCycle(false))
                    
                    0ms DEBUG return=FailedJudgment { judgment: "prove_normalize_via { goal: ?ty_1, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }
                  
                  0ms DEBUG rule normalize-via-assumption failed at step 1 because judgment had no applicable rules: `prove_normalize_via { goal: ?ty_1, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }`  (crates/formality-prove/src/prove/prove_normalize.rs:27:14)
                  prove_normalize_via goal=?ty_1, via=Not(!ty_0), assumptions={Foo(!ty_0), Not(!ty_0)}, env=Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                    0ms DEBUG output={}
                  
                  new judgment="prove_normalize_via { goal: ?ty_1, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules={}
                    strip_cycles failed_rules={}
                      0ms DEBUG cycles={}, non_cycles={}
                      0ms DEBUG return=({}, HasNonCycle(false))
                    
                    0ms DEBUG return=FailedJudgment { judgment: "prove_normalize_via { goal: ?ty_1, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }
                  
                  1ms DEBUG rule normalize-via-assumption failed at step 1 because judgment had no applicable rules: `prove_normalize_via { goal: ?ty_1, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }`  (crates/formality-prove/src/prove/prove_normalize.rs:27:14)
                  1ms DEBUG output={}
                
                new judgment="prove_normalize { p: ?ty_1, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules={FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: ?ty_1, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: ?ty_1, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}
                  strip_cycles failed_rules={FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: ?ty_1, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: ?ty_1, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}
                    failed_rule failed_rule=FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: ?ty_1, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }
                      strip_cycles failed_rules={}
                        0ms DEBUG cycles={}, non_cycles={}
                        0ms DEBUG return=({}, HasNonCycle(false))
                      
                    
                    failed_rule failed_rule=FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: ?ty_1, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }
                      strip_cycles failed_rules={}
                        0ms DEBUG cycles={}, non_cycles={}
                        0ms DEBUG return=({}, HasNonCycle(false))
                      
                    
                    0ms DEBUG cycles={FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: ?ty_1, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: ?ty_1, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}, non_cycles={}
                    0ms DEBUG return=({FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: ?ty_1, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: ?ty_1, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}, HasNonCycle(false))
                  
                  0ms DEBUG return=FailedJudgment { judgment: "prove_normalize { p: ?ty_1, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: ?ty_1, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: ?ty_1, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }
                
                2ms DEBUG rule normalize-l failed at step 0 because judgment `prove_normalize { p: ?ty_1, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }` failed at the following rule(s):
                  the rule "normalize-via-assumption" failed at step #1 (crates/formality-prove/src/prove/prove_normalize.rs:27:14) because
                    judgment had no applicable rules: `prove_normalize_via { goal: ?ty_1, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }`
                  the rule "normalize-via-assumption" failed at step #1 (crates/formality-prove/src/prove/prove_normalize.rs:27:14) because
                    judgment had no applicable rules: `prove_normalize_via { goal: ?ty_1, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }` (crates/formality-prove/src/prove/prove_eq.rs:68:14)
                2ms DEBUG output={Constraints { env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, known_true: true, substitution: {?ty_1 => !ty_0} }}
              
              2ms DEBUG produced Constraints { env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, known_true: true, substitution: {?ty_1 => !ty_0} } from rule "symmetric" in judgment "prove_eq"
              prove_normalize p=!ty_0, assumptions={Foo(!ty_0), Not(!ty_0)}, env=Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                prove_normalize_via goal=!ty_0, via=Foo(!ty_0), assumptions={Foo(!ty_0), Not(!ty_0)}, env=Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                  0ms DEBUG output={}
                
                new judgment="prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules={}
                  strip_cycles failed_rules={}
                    0ms DEBUG cycles={}, non_cycles={}
                    0ms DEBUG return=({}, HasNonCycle(false))
                  
                  0ms DEBUG return=FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }
                
                0ms DEBUG rule normalize-via-assumption failed at step 1 because judgment had no applicable rules: `prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }`  (crates/formality-prove/src/prove/prove_normalize.rs:27:14)
                prove_normalize_via goal=!ty_0, via=Not(!ty_0), assumptions={Foo(!ty_0), Not(!ty_0)}, env=Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                  0ms DEBUG output={}
                
                new judgment="prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules={}
                  strip_cycles failed_rules={}
                    0ms DEBUG cycles={}, non_cycles={}
                    0ms DEBUG return=({}, HasNonCycle(false))
                  
                  0ms DEBUG return=FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }
                
                1ms DEBUG rule normalize-via-assumption failed at step 1 because judgment had no applicable rules: `prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }`  (crates/formality-prove/src/prove/prove_normalize.rs:27:14)
                1ms DEBUG output={}
              
              new judgment="prove_normalize { p: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules={FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}
                strip_cycles failed_rules={FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}
                  failed_rule failed_rule=FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }
                    strip_cycles failed_rules={}
                      0ms DEBUG cycles={}, non_cycles={}
                      0ms DEBUG return=({}, HasNonCycle(false))
                    
                  
                  failed_rule failed_rule=FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }
                    strip_cycles failed_rules={}
                      0ms DEBUG cycles={}, non_cycles={}
                      0ms DEBUG return=({}, HasNonCycle(false))
                    
                  
                  0ms DEBUG cycles={FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}, non_cycles={}
                  0ms DEBUG return=({FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}, HasNonCycle(false))
                
                0ms DEBUG return=FailedJudgment { judgment: "prove_normalize { p: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }
              
              4ms DEBUG rule normalize-l failed at step 0 because judgment `prove_normalize { p: !ty_0, assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }` failed at the following rule(s):
                the rule "normalize-via-assumption" failed at step #1 (crates/formality-prove/src/prove/prove_normalize.rs:27:14) because
                  judgment had no applicable rules: `prove_normalize_via { goal: !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }`
                the rule "normalize-via-assumption" failed at step #1 (crates/formality-prove/src/prove/prove_normalize.rs:27:14) because
                  judgment had no applicable rules: `prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }` (crates/formality-prove/src/prove/prove_eq.rs:68:14)
              4ms DEBUG output={Constraints { env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, known_true: true, substitution: {?ty_1 => !ty_0} }}
            
            11ms DEBUG produced Constraints { env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, known_true: true, substitution: {?ty_1 => !ty_0} } from rule "eq" in judgment "prove_wc"
            11ms DEBUG output={Constraints { env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, known_true: true, substitution: {?ty_1 => !ty_0} }}
          
          prove_after constraints=Constraints { env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, known_true: true, substitution: {?ty_1 => !ty_0} }, goal={}, assumptions={Foo(!ty_0), Not(!ty_0)}, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
            prove goal={}, assumptions={Foo(!ty_0), Not(!ty_0)}, env=Env { variables: [!ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
              prove_wc_list goal={}, assumptions={Foo(!ty_0), Not(!ty_0)}, env=Env { variables: [!ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                0ms DEBUG produced Constraints { env: Env { variables: [!ty_0], bias: Soundness }, known_true: true, substitution: {} } from rule "none" in judgment "prove_wc_list"
                0ms DEBUG output={Constraints { env: Env { variables: [!ty_0], bias: Soundness }, known_true: true, substitution: {} }}
              
              0ms DEBUG result_set={Constraints { env: Env { variables: [!ty_0], bias: Soundness }, known_true: true, substitution: {} }}
            
            0ms DEBUG produced Constraints { env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, known_true: true, substitution: {?ty_1 => !ty_0} } from rule "prove_after" in judgment "prove_after"
            0ms DEBUG output={Constraints { env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, known_true: true, substitution: {?ty_1 => !ty_0} }}
          
          12ms DEBUG produced Constraints { env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, known_true: true, substitution: {?ty_1 => !ty_0} } from rule "some" in judgment "prove_wc_list"
          12ms DEBUG output={Constraints { env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, known_true: true, substitution: {?ty_1 => !ty_0} }}
        
        12ms DEBUG result_set={Constraints { env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, known_true: true, substitution: {?ty_1 => !ty_0} }}
      
      prove_after constraints=Constraints { env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, known_true: true, substitution: {?ty_1 => !ty_0} }, goal={Not(?ty_1)}, assumptions={Foo(!ty_0), Not(!ty_0)}, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
        prove goal={Not(!ty_0)}, assumptions={Foo(!ty_0), Not(!ty_0)}, env=Env { variables: [!ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
          prove_wc_list goal={Not(!ty_0)}, assumptions={Foo(!ty_0), Not(!ty_0)}, env=Env { variables: [!ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
            prove_wc goal=Not(!ty_0), assumptions={Foo(!ty_0), Not(!ty_0)}, env=Env { variables: [!ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
              prove_via goal=Not(!ty_0), via=Foo(!ty_0), assumptions={Foo(!ty_0), Not(!ty_0)}, env=Env { variables: [!ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                0ms DEBUG output={}
              
              new judgment="prove_via { goal: Not(!ty_0), via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules={}
                strip_cycles failed_rules={}
                  0ms DEBUG cycles={}, non_cycles={}
                  0ms DEBUG return=({}, HasNonCycle(false))
                
                0ms DEBUG return=FailedJudgment { judgment: "prove_via { goal: Not(!ty_0), via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }
              
              0ms DEBUG rule assumption failed at step 1 because judgment had no applicable rules: `prove_via { goal: Not(!ty_0), via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }`  (crates/formality-prove/src/prove/prove_wc.rs:44:14)
              prove_via goal=Not(!ty_0), via=Not(!ty_0), assumptions={Foo(!ty_0), Not(!ty_0)}, env=Env { variables: [!ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                prove goal={!ty_0 = !ty_0}, assumptions={Foo(!ty_0), Not(!ty_0)}, env=Env { variables: [!ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                  prove_wc_list goal={!ty_0 = !ty_0}, assumptions={Foo(!ty_0), Not(!ty_0)}, env=Env { variables: [!ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                    prove_wc goal=!ty_0 = !ty_0, assumptions={Foo(!ty_0), Not(!ty_0)}, env=Env { variables: [!ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                      prove_via goal=!ty_0 = !ty_0, via=Foo(!ty_0), assumptions={Foo(!ty_0), Not(!ty_0)}, env=Env { variables: [!ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                        0ms DEBUG output={}
                      
                      new judgment="prove_via { goal: !ty_0 = !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules={}
                        strip_cycles failed_rules={}
                          0ms DEBUG cycles={}, non_cycles={}
                          0ms DEBUG return=({}, HasNonCycle(false))
                        
                        0ms DEBUG return=FailedJudgment { judgment: "prove_via { goal: !ty_0 = !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }
                      
                      0ms DEBUG rule assumption failed at step 1 because judgment had no applicable rules: `prove_via { goal: !ty_0 = !ty_0, via: Foo(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }`  (crates/formality-prove/src/prove/prove_wc.rs:50:14)
                      prove_via goal=!ty_0 = !ty_0, via=Not(!ty_0), assumptions={Foo(!ty_0), Not(!ty_0)}, env=Env { variables: [!ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                        0ms DEBUG output={}
                      
                      new judgment="prove_via { goal: !ty_0 = !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules={}
                        strip_cycles failed_rules={}
                          0ms DEBUG cycles={}, non_cycles={}
                          0ms DEBUG return=({}, HasNonCycle(false))
                        
                        0ms DEBUG return=FailedJudgment { judgment: "prove_via { goal: !ty_0 = !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }
                      
                      1ms DEBUG rule assumption failed at step 1 because judgment had no applicable rules: `prove_via { goal: !ty_0 = !ty_0, via: Not(!ty_0), assumptions: {Foo(!ty_0), Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }`  (crates/formality-prove/src/prove/prove_wc.rs:50:14)
                      1ms DEBUG produced Constraints { env: Env { variables: [!ty_0], bias: Soundness }, known_true: true, substitution: {} } from rule "eq" in judgment "prove_wc"
                      1ms DEBUG output={Constraints { env: Env { variables: [!ty_0], bias: Soundness }, known_true: true, substitution: {} }}
                    
                    prove_after constraints=Constraints { env: Env { variables: [!ty_0], bias: Soundness }, known_true: true, substitution: {} }, goal={}, assumptions={Foo(!ty_0), Not(!ty_0)}, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                      prove goal={}, assumptions={Foo(!ty_0), Not(!ty_0)}, env=Env { variables: [!ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                        prove_wc_list goal={}, assumptions={Foo(!ty_0), Not(!ty_0)}, env=Env { variables: [!ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                          0ms DEBUG produced Constraints { env: Env { variables: [!ty_0], bias: Soundness }, known_true: true, substitution: {} } from rule "none" in judgment "prove_wc_list"
                          0ms DEBUG output={Constraints { env: Env { variables: [!ty_0], bias: Soundness }, known_true: true, substitution: {} }}
                        
                        0ms DEBUG result_set={Constraints { env: Env { variables: [!ty_0], bias: Soundness }, known_true: true, substitution: {} }}
                      
                      0ms DEBUG produced Constraints { env: Env { variables: [!ty_0], bias: Soundness }, known_true: true, substitution: {} } from rule "prove_after" in judgment "prove_after"
                      0ms DEBUG output={Constraints { env: Env { variables: [!ty_0], bias: Soundness }, known_true: true, substitution: {} }}
                    
                    2ms DEBUG produced Constraints { env: Env { variables: [!ty_0], bias: Soundness }, known_true: true, substitution: {} } from rule "some" in judgment "prove_wc_list"
                    2ms DEBUG output={Constraints { env: Env { variables: [!ty_0], bias: Soundness }, known_true: true, substitution: {} }}
                  
                  2ms DEBUG result_set={Constraints { env: Env { variables: [!ty_0], bias: Soundness }, known_true: true, substitution: {} }}
                
                3ms DEBUG produced Constraints { env: Env { variables: [!ty_0], bias: Soundness }, known_true: true, substitution: {} } from rule "predicate-congruence-axiom" in judgment "prove_via"
                3ms DEBUG output={Constraints { env: Env { variables: [!ty_0], bias: Soundness }, known_true: true, substitution: {} }}
              
              3ms DEBUG produced Constraints { env: Env { variables: [!ty_0], bias: Soundness }, known_true: true, substitution: {} } from rule "assumption" in judgment "prove_wc"
              3ms DEBUG rule trait implied bound failed at step 0 because expression evaluated to an empty collection: `decls.trait_invariants()` (crates/formality-prove/src/prove/prove_wc.rs:92:14)
              4ms DEBUG output={Constraints { env: Env { variables: [!ty_0], bias: Soundness }, known_true: true, substitution: {} }}
            
            prove_after constraints=Constraints { env: Env { variables: [!ty_0], bias: Soundness }, known_true: true, substitution: {} }, goal={}, assumptions={Foo(!ty_0), Not(!ty_0)}, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
              prove goal={}, assumptions={Foo(!ty_0), Not(!ty_0)}, env=Env { variables: [!ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                prove_wc_list goal={}, assumptions={Foo(!ty_0), Not(!ty_0)}, env=Env { variables: [!ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                  0ms DEBUG produced Constraints { env: Env { variables: [!ty_0], bias: Soundness }, known_true: true, substitution: {} } from rule "none" in judgment "prove_wc_list"
                  0ms DEBUG output={Constraints { env: Env { variables: [!ty_0], bias: Soundness }, known_true: true, substitution: {} }}
                
                0ms DEBUG result_set={Constraints { env: Env { variables: [!ty_0], bias: Soundness }, known_true: true, substitution: {} }}
              
              0ms DEBUG produced Constraints { env: Env { variables: [!ty_0], bias: Soundness }, known_true: true, substitution: {} } from rule "prove_after" in judgment "prove_after"
              0ms DEBUG output={Constraints { env: Env { variables: [!ty_0], bias: Soundness }, known_true: true, substitution: {} }}
            
            5ms DEBUG produced Constraints { env: Env { variables: [!ty_0], bias: Soundness }, known_true: true, substitution: {} } from rule "some" in judgment "prove_wc_list"
            5ms DEBUG output={Constraints { env: Env { variables: [!ty_0], bias: Soundness }, known_true: true, substitution: {} }}
          
          5ms DEBUG result_set={Constraints { env: Env { variables: [!ty_0], bias: Soundness }, known_true: true, substitution: {} }}
        
        5ms DEBUG produced Constraints { env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, known_true: true, substitution: {?ty_1 => !ty_0} } from rule "prove_after" in judgment "prove_after"
        5ms DEBUG output={Constraints { env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, known_true: true, substitution: {?ty_1 => !ty_0} }}
      
      prove_after constraints=Constraints { env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, known_true: true, substitution: {?ty_1 => !ty_0} }, goal={}, assumptions={Not(!ty_0)}, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
        prove goal={}, assumptions={Not(!ty_0)}, env=Env { variables: [!ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
          prove_wc_list goal={}, assumptions={Not(!ty_0)}, env=Env { variables: [!ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
            0ms DEBUG produced Constraints { env: Env { variables: [!ty_0], bias: Soundness }, known_true: true, substitution: {} } from rule "none" in judgment "prove_wc_list"
            0ms DEBUG output={Constraints { env: Env { variables: [!ty_0], bias: Soundness }, known_true: true, substitution: {} }}
          
          0ms DEBUG result_set={Constraints { env: Env { variables: [!ty_0], bias: Soundness }, known_true: true, substitution: {} }}
        
        0ms DEBUG produced Constraints { env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, known_true: true, substitution: {?ty_1 => !ty_0} } from rule "prove_after" in judgment "prove_after"
        0ms DEBUG output={Constraints { env: Env { variables: [!ty_0, ?ty_1], bias: Soundness }, known_true: true, substitution: {?ty_1 => !ty_0} }}
      
      36ms DEBUG produced Constraints { env: Env { variables: [!ty_0], bias: Soundness }, known_true: true, substitution: {} } from rule "positive impl" in judgment "prove_wc"
      36ms DEBUG rule trait implied bound failed at step 0 because expression evaluated to an empty collection: `decls.trait_invariants()` (crates/formality-prove/src/prove/prove_wc.rs:92:14)
      36ms DEBUG output={Constraints { env: Env { variables: [!ty_0], bias: Soundness }, known_true: true, substitution: {} }}
    
    prove_after constraints=Constraints { env: Env { variables: [!ty_0], bias: Soundness }, known_true: true, substitution: {} }, goal={}, assumptions={Not(!ty_0)}, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
      prove goal={}, assumptions={Not(!ty_0)}, env=Env { variables: [!ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
        prove_wc_list goal={}, assumptions={Not(!ty_0)}, env=Env { variables: [!ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
          0ms DEBUG produced Constraints { env: Env { variables: [!ty_0], bias: Soundness }, known_true: true, substitution: {} } from rule "none" in judgment "prove_wc_list"
          0ms DEBUG output={Constraints { env: Env { variables: [!ty_0], bias: Soundness }, known_true: true, substitution: {} }}
        
        0ms DEBUG result_set={Constraints { env: Env { variables: [!ty_0], bias: Soundness }, known_true: true, substitution: {} }}
      
      0ms DEBUG produced Constraints { env: Env { variables: [!ty_0], bias: Soundness }, known_true: true, substitution: {} } from rule "prove_after" in judgment "prove_after"
      0ms DEBUG output={Constraints { env: Env { variables: [!ty_0], bias: Soundness }, known_true: true, substitution: {} }}
    
    37ms DEBUG produced Constraints { env: Env { variables: [!ty_0], bias: Soundness }, known_true: true, substitution: {} } from rule "some" in judgment "prove_wc_list"
    37ms DEBUG output={Constraints { env: Env { variables: [!ty_0], bias: Soundness }, known_true: true, substitution: {} }}
  
  37ms DEBUG result_set={Constraints { env: Env { variables: [!ty_0], bias: Soundness }, known_true: true, substitution: {} }}

prove_not_goal env=Env { variables: [!ty_1], bias: Soundness }
  is_definitely_not_proveable 
    0ms DEBUG assumptions={Not(!ty_1)}, data={! Foo(!ty_1)}
    prove goal={! Foo(?ty_0)}, assumptions={Not(?ty_0)}, env=Env { variables: [?ty_0], bias: Completeness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
      prove_wc_list goal={! Foo(?ty_0)}, assumptions={Not(?ty_0)}, env=Env { variables: [?ty_0], bias: Completeness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
        prove_wc goal=! Foo(?ty_0), assumptions={Not(?ty_0)}, env=Env { variables: [?ty_0], bias: Completeness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
          prove_via goal=! Foo(?ty_0), via=Not(?ty_0), assumptions={Not(?ty_0)}, env=Env { variables: [?ty_0], bias: Completeness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
            0ms DEBUG output={}
          
          new judgment="prove_via { goal: ! Foo(?ty_0), via: Not(?ty_0), assumptions: {Not(?ty_0)}, env: Env { variables: [?ty_0], bias: Completeness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules={}
            strip_cycles failed_rules={}
              0ms DEBUG cycles={}, non_cycles={}
              0ms DEBUG return=({}, HasNonCycle(false))
            
            0ms DEBUG return=FailedJudgment { judgment: "prove_via { goal: ! Foo(?ty_0), via: Not(?ty_0), assumptions: {Not(?ty_0)}, env: Env { variables: [?ty_0], bias: Completeness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }
          
          0ms DEBUG rule assumption failed at step 1 because judgment had no applicable rules: `prove_via { goal: ! Foo(?ty_0), via: Not(?ty_0), assumptions: {Not(?ty_0)}, env: Env { variables: [?ty_0], bias: Completeness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }`  (crates/formality-prove/src/prove/prove_wc.rs:44:14)
          0ms DEBUG rule negative impl failed at step 0 because expression evaluated to an empty collection: `decls.neg_impl_decls(&trait_ref.trait_id)` (crates/formality-prove/src/prove/prove_wc.rs:76:14)
          0ms DEBUG output={}
        
        new judgment="prove_wc { goal: ! Foo(?ty_0), assumptions: {Not(?ty_0)}, env: Env { variables: [?ty_0], bias: Completeness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules={FailedRule { rule_name_index: Some(("assumption", 1)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 44, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_via { goal: ! Foo(?ty_0), via: Not(?ty_0), assumptions: {Not(?ty_0)}, env: Env { variables: [?ty_0], bias: Completeness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("negative impl", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 76, column: 14, cause: EmptyCollection { expr: "decls.neg_impl_decls(&trait_ref.trait_id)" } }}
          strip_cycles failed_rules={FailedRule { rule_name_index: Some(("assumption", 1)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 44, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_via { goal: ! Foo(?ty_0), via: Not(?ty_0), assumptions: {Not(?ty_0)}, env: Env { variables: [?ty_0], bias: Completeness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("negative impl", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 76, column: 14, cause: EmptyCollection { expr: "decls.neg_impl_decls(&trait_ref.trait_id)" } }}
            failed_rule failed_rule=FailedRule { rule_name_index: Some(("assumption", 1)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 44, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_via { goal: ! Foo(?ty_0), via: Not(?ty_0), assumptions: {Not(?ty_0)}, env: Env { variables: [?ty_0], bias: Completeness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }
              strip_cycles failed_rules={}
                0ms DEBUG cycles={}, non_cycles={}
                0ms DEBUG return=({}, HasNonCycle(false))
              
            
            failed_rule failed_rule=FailedRule { rule_name_index: Some(("negative impl", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 76, column: 14, cause: EmptyCollection { expr: "decls.neg_impl_decls(&trait_ref.trait_id)" } }
            
            0ms DEBUG cycles={FailedRule { rule_name_index: Some(("assumption", 1)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 44, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_via { goal: ! Foo(?ty_0), via: Not(?ty_0), assumptions: {Not(?ty_0)}, env: Env { variables: [?ty_0], bias: Completeness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}, non_cycles={FailedRule { rule_name_index: Some(("negative impl", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 76, column: 14, cause: EmptyCollection { expr: "decls.neg_impl_decls(&trait_ref.trait_id)" } }}
            0ms DEBUG return=({FailedRule { rule_name_index: Some(("negative impl", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 76, column: 14, cause: EmptyCollection { expr: "decls.neg_impl_decls(&trait_ref.trait_id)" } }}, HasNonCycle(true))
          
          0ms DEBUG return=FailedJudgment { judgment: "prove_wc { goal: ! Foo(?ty_0), assumptions: {Not(?ty_0)}, env: Env { variables: [?ty_0], bias: Completeness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("negative impl", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 76, column: 14, cause: EmptyCollection { expr: "decls.neg_impl_decls(&trait_ref.trait_id)" } }} }
        
        1ms DEBUG rule some failed at step 0 because judgment `prove_wc { goal: ! Foo(?ty_0), assumptions: {Not(?ty_0)}, env: Env { variables: [?ty_0], bias: Completeness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }` failed at the following rule(s):
          the rule "negative impl" failed at step #0 (crates/formality-prove/src/prove/prove_wc.rs:76:14) because
            expression evaluated to an empty collection: `decls.neg_impl_decls(&trait_ref.trait_id)` (crates/formality-prove/src/prove/prove_wc_list.rs:28:14)
        1ms DEBUG output={}
      
      new judgment="prove_wc_list { goal: {! Foo(?ty_0)}, assumptions: {Not(?ty_0)}, env: Env { variables: [?ty_0], bias: Completeness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules={FailedRule { rule_name_index: Some(("some", 0)), file: "crates/formality-prove/src/prove/prove_wc_list.rs", line: 28, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_wc { goal: ! Foo(?ty_0), assumptions: {Not(?ty_0)}, env: Env { variables: [?ty_0], bias: Completeness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("negative impl", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 76, column: 14, cause: EmptyCollection { expr: "decls.neg_impl_decls(&trait_ref.trait_id)" } }} }) }}
        strip_cycles failed_rules={FailedRule { rule_name_index: Some(("some", 0)), file: "crates/formality-prove/src/prove/prove_wc_list.rs", line: 28, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_wc { goal: ! Foo(?ty_0), assumptions: {Not(?ty_0)}, env: Env { variables: [?ty_0], bias: Completeness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("negative impl", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 76, column: 14, cause: EmptyCollection { expr: "decls.neg_impl_decls(&trait_ref.trait_id)" } }} }) }}
          failed_rule failed_rule=FailedRule { rule_name_index: Some(("some", 0)), file: "crates/formality-prove/src/prove/prove_wc_list.rs", line: 28, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_wc { goal: ! Foo(?ty_0), assumptions: {Not(?ty_0)}, env: Env { variables: [?ty_0], bias: Completeness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("negative impl", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 76, column: 14, cause: EmptyCollection { expr: "decls.neg_impl_decls(&trait_ref.trait_id)" } }} }) }
            strip_cycles failed_rules={FailedRule { rule_name_index: Some(("negative impl", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 76, column: 14, cause: EmptyCollection { expr: "decls.neg_impl_decls(&trait_ref.trait_id)" } }}
              failed_rule failed_rule=FailedRule { rule_name_index: Some(("negative impl", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 76, column: 14, cause: EmptyCollection { expr: "decls.neg_impl_decls(&trait_ref.trait_id)" } }
              
              0ms DEBUG cycles={}, non_cycles={FailedRule { rule_name_index: Some(("negative impl", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 76, column: 14, cause: EmptyCollection { expr: "decls.neg_impl_decls(&trait_ref.trait_id)" } }}
              0ms DEBUG return=({FailedRule { rule_name_index: Some(("negative impl", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 76, column: 14, cause: EmptyCollection { expr: "decls.neg_impl_decls(&trait_ref.trait_id)" } }}, HasNonCycle(true))
            
          
          0ms DEBUG cycles={}, non_cycles={FailedRule { rule_name_index: Some(("some", 0)), file: "crates/formality-prove/src/prove/prove_wc_list.rs", line: 28, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_wc { goal: ! Foo(?ty_0), assumptions: {Not(?ty_0)}, env: Env { variables: [?ty_0], bias: Completeness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("negative impl", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 76, column: 14, cause: EmptyCollection { expr: "decls.neg_impl_decls(&trait_ref.trait_id)" } }} }) }}
          0ms DEBUG return=({FailedRule { rule_name_index: Some(("some", 0)), file: "crates/formality-prove/src/prove/prove_wc_list.rs", line: 28, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_wc { goal: ! Foo(?ty_0), assumptions: {Not(?ty_0)}, env: Env { variables: [?ty_0], bias: Completeness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("negative impl", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 76, column: 14, cause: EmptyCollection { expr: "decls.neg_impl_decls(&trait_ref.trait_id)" } }} }) }}, HasNonCycle(true))
        
        0ms DEBUG return=FailedJudgment { judgment: "prove_wc_list { goal: {! Foo(?ty_0)}, assumptions: {Not(?ty_0)}, env: Env { variables: [?ty_0], bias: Completeness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("some", 0)), file: "crates/formality-prove/src/prove/prove_wc_list.rs", line: 28, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_wc { goal: ! Foo(?ty_0), assumptions: {Not(?ty_0)}, env: Env { variables: [?ty_0], bias: Completeness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("negative impl", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 76, column: 14, cause: EmptyCollection { expr: "decls.neg_impl_decls(&trait_ref.trait_id)" } }} }) }} }
      
      2ms DEBUG result_set=FailedJudgment { judgment: "prove_wc_list { goal: {! Foo(?ty_0)}, assumptions: {Not(?ty_0)}, env: Env { variables: [?ty_0], bias: Completeness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("some", 0)), file: "crates/formality-prove/src/prove/prove_wc_list.rs", line: 28, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_wc { goal: ! Foo(?ty_0), assumptions: {Not(?ty_0)}, env: Env { variables: [?ty_0], bias: Completeness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("negative impl", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 76, column: 14, cause: EmptyCollection { expr: "decls.neg_impl_decls(&trait_ref.trait_id)" } }} }) }} }
    
    2ms DEBUG Proved `negation_via_failure`, error = judgment `prove_wc_list { goal: {! Foo(?ty_0)}, assumptions: {Not(?ty_0)}, env: Env { variables: [?ty_0], bias: Completeness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }` failed at the following rule(s):
      the rule "some" failed at step #0 (crates/formality-prove/src/prove/prove_wc_list.rs:28:14) because
        judgment `prove_wc { goal: ! Foo(?ty_0), assumptions: {Not(?ty_0)}, env: Env { variables: [?ty_0], bias: Completeness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }` failed at the following rule(s):
          the rule "negative impl" failed at step #0 (crates/formality-prove/src/prove/prove_wc.rs:76:14) because
            expression evaluated to an empty collection: `decls.neg_impl_decls(&trait_ref.trait_id)`
  

prove goal={}, assumptions={}, env=Env { variables: [], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
  prove_wc_list goal={}, assumptions={}, env=Env { variables: [], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
    0ms DEBUG produced Constraints { env: Env { variables: [], bias: Soundness }, known_true: true, substitution: {} } from rule "none" in judgment "prove_wc_list"
    0ms DEBUG output={Constraints { env: Env { variables: [], bias: Soundness }, known_true: true, substitution: {} }}
  
  0ms DEBUG result_set={Constraints { env: Env { variables: [], bias: Soundness }, known_true: true, substitution: {} }}

prove goal={@ IsLocal(Foo(u32))}, assumptions={}, env=Env { variables: [], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
  prove_wc_list goal={@ IsLocal(Foo(u32))}, assumptions={}, env=Env { variables: [], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
    prove_wc goal=@ IsLocal(Foo(u32)), assumptions={}, env=Env { variables: [], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
      is_local_trait_ref goal=Foo(u32), assumptions={}, env=Env { variables: [], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
        0ms DEBUG produced Constraints { env: Env { variables: [], bias: Soundness }, known_true: true, substitution: {} } from rule "local trait" in judgment "is_local_trait_ref"
        is_local_parameter goal=u32, assumptions={}, env=Env { variables: [], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
          prove_normalize p=u32, assumptions={}, env=Env { variables: [], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
            0ms DEBUG output={}
          
          new judgment="prove_normalize { p: u32, assumptions: {}, env: Env { variables: [], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules={}
            strip_cycles failed_rules={}
              0ms DEBUG cycles={}, non_cycles={}
              0ms DEBUG return=({}, HasNonCycle(false))
            
            0ms DEBUG return=FailedJudgment { judgment: "prove_normalize { p: u32, assumptions: {}, env: Env { variables: [], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }
          
          0ms DEBUG rule local parameter failed at step 0 because judgment had no applicable rules: `prove_normalize { p: u32, assumptions: {}, env: Env { variables: [], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }`  (crates/formality-prove/src/prove/is_local.rs:289:14)
          0ms DEBUG rule fundamental rigid type failed at step 0 because condition evaluted to false: `is_fundamental(&decls, &name)`
            &decls = decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
            &name = (scalar u32) (crates/formality-prove/src/prove/is_local.rs:298:17)
          0ms DEBUG output={}
        
        new judgment="is_local_parameter { goal: u32, assumptions: {}, env: Env { variables: [], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules={FailedRule { rule_name_index: Some(("fundamental rigid type", 0)), file: "crates/formality-prove/src/prove/is_local.rs", line: 298, column: 17, cause: IfFalse { expr: "is_fundamental(&decls, &name)", args: [("&decls", "decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})"), ("&name", "(scalar u32)")] } }, FailedRule { rule_name_index: Some(("local parameter", 0)), file: "crates/formality-prove/src/prove/is_local.rs", line: 289, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: u32, assumptions: {}, env: Env { variables: [], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}
          strip_cycles failed_rules={FailedRule { rule_name_index: Some(("fundamental rigid type", 0)), file: "crates/formality-prove/src/prove/is_local.rs", line: 298, column: 17, cause: IfFalse { expr: "is_fundamental(&decls, &name)", args: [("&decls", "decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})"), ("&name", "(scalar u32)")] } }, FailedRule { rule_name_index: Some(("local parameter", 0)), file: "crates/formality-prove/src/prove/is_local.rs", line: 289, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: u32, assumptions: {}, env: Env { variables: [], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}
            failed_rule failed_rule=FailedRule { rule_name_index: Some(("fundamental rigid type", 0)), file: "crates/formality-prove/src/prove/is_local.rs", line: 298, column: 17, cause: IfFalse { expr: "is_fundamental(&decls, &name)", args: [("&decls", "decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})"), ("&name", "(scalar u32)")] } }
            
            failed_rule failed_rule=FailedRule { rule_name_index: Some(("local parameter", 0)), file: "crates/formality-prove/src/prove/is_local.rs", line: 289, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: u32, assumptions: {}, env: Env { variables: [], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }
              strip_cycles failed_rules={}
                0ms DEBUG cycles={}, non_cycles={}
                0ms DEBUG return=({}, HasNonCycle(false))
              
            
            0ms DEBUG cycles={FailedRule { rule_name_index: Some(("local parameter", 0)), file: "crates/formality-prove/src/prove/is_local.rs", line: 289, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: u32, assumptions: {}, env: Env { variables: [], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}, non_cycles={FailedRule { rule_name_index: Some(("fundamental rigid type", 0)), file: "crates/formality-prove/src/prove/is_local.rs", line: 298, column: 17, cause: IfFalse { expr: "is_fundamental(&decls, &name)", args: [("&decls", "decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})"), ("&name", "(scalar u32)")] } }}
            0ms DEBUG return=({FailedRule { rule_name_index: Some(("fundamental rigid type", 0)), file: "crates/formality-prove/src/prove/is_local.rs", line: 298, column: 17, cause: IfFalse { expr: "is_fundamental(&decls, &name)", args: [("&decls", "decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})"), ("&name", "(scalar u32)")] } }}, HasNonCycle(true))
          
          0ms DEBUG return=FailedJudgment { judgment: "is_local_parameter { goal: u32, assumptions: {}, env: Env { variables: [], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("fundamental rigid type", 0)), file: "crates/formality-prove/src/prove/is_local.rs", line: 298, column: 17, cause: IfFalse { expr: "is_fundamental(&decls, &name)", args: [("&decls", "decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})"), ("&name", "(scalar u32)")] } }} }
        
        1ms DEBUG rule local parameter failed at step 1 because judgment `is_local_parameter { goal: u32, assumptions: {}, env: Env { variables: [], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }` failed at the following rule(s):
          the rule "fundamental rigid type" failed at step #0 (crates/formality-prove/src/prove/is_local.rs:298:17) because
            condition evaluted to false: `is_fundamental(&decls, &name)`
              &decls = decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
              &name = (scalar u32) (crates/formality-prove/src/prove/is_local.rs:217:14)
        1ms DEBUG output={Constraints { env: Env { variables: [], bias: Soundness }, known_true: true, substitution: {} }}
      
      1ms DEBUG produced Constraints { env: Env { variables: [], bias: Soundness }, known_true: true, substitution: {} } from rule "trait ref is local" in judgment "prove_wc"
      1ms DEBUG output={Constraints { env: Env { variables: [], bias: Soundness }, known_true: true, substitution: {} }}
    
    prove_after constraints=Constraints { env: Env { variables: [], bias: Soundness }, known_true: true, substitution: {} }, goal={}, assumptions={}, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
      prove goal={}, assumptions={}, env=Env { variables: [], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
        prove_wc_list goal={}, assumptions={}, env=Env { variables: [], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
          0ms DEBUG produced Constraints { env: Env { variables: [], bias: Soundness }, known_true: true, substitution: {} } from rule "none" in judgment "prove_wc_list"
          0ms DEBUG output={Constraints { env: Env { variables: [], bias: Soundness }, known_true: true, substitution: {} }}
        
        0ms DEBUG result_set={Constraints { env: Env { variables: [], bias: Soundness }, known_true: true, substitution: {} }}
      
      0ms DEBUG produced Constraints { env: Env { variables: [], bias: Soundness }, known_true: true, substitution: {} } from rule "prove_after" in judgment "prove_after"
      0ms DEBUG output={Constraints { env: Env { variables: [], bias: Soundness }, known_true: true, substitution: {} }}
    
    2ms DEBUG produced Constraints { env: Env { variables: [], bias: Soundness }, known_true: true, substitution: {} } from rule "some" in judgment "prove_wc_list"
    2ms DEBUG output={Constraints { env: Env { variables: [], bias: Soundness }, known_true: true, substitution: {} }}
  
  2ms DEBUG result_set={Constraints { env: Env { variables: [], bias: Soundness }, known_true: true, substitution: {} }}

prove goal={@ IsLocal(Foo(!ty_0))}, assumptions={Not(!ty_0)}, env=Env { variables: [!ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
  prove_wc_list goal={@ IsLocal(Foo(!ty_0))}, assumptions={Not(!ty_0)}, env=Env { variables: [!ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
    prove_wc goal=@ IsLocal(Foo(!ty_0)), assumptions={Not(!ty_0)}, env=Env { variables: [!ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
      prove_via goal=@ IsLocal(Foo(!ty_0)), via=Not(!ty_0), assumptions={Not(!ty_0)}, env=Env { variables: [!ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
        0ms DEBUG output={}
      
      new judgment="prove_via { goal: @ IsLocal(Foo(!ty_0)), via: Not(!ty_0), assumptions: {Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules={}
        strip_cycles failed_rules={}
          0ms DEBUG cycles={}, non_cycles={}
          0ms DEBUG return=({}, HasNonCycle(false))
        
        0ms DEBUG return=FailedJudgment { judgment: "prove_via { goal: @ IsLocal(Foo(!ty_0)), via: Not(!ty_0), assumptions: {Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }
      
      0ms DEBUG rule assumption failed at step 1 because judgment had no applicable rules: `prove_via { goal: @ IsLocal(Foo(!ty_0)), via: Not(!ty_0), assumptions: {Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }`  (crates/formality-prove/src/prove/prove_wc.rs:44:14)
      is_local_trait_ref goal=Foo(!ty_0), assumptions={Not(!ty_0)}, env=Env { variables: [!ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
        0ms DEBUG produced Constraints { env: Env { variables: [!ty_0], bias: Soundness }, known_true: true, substitution: {} } from rule "local trait" in judgment "is_local_trait_ref"
        is_local_parameter goal=!ty_0, assumptions={Not(!ty_0)}, env=Env { variables: [!ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
          prove_normalize p=!ty_0, assumptions={Not(!ty_0)}, env=Env { variables: [!ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
            prove_normalize_via goal=!ty_0, via=Not(!ty_0), assumptions={Not(!ty_0)}, env=Env { variables: [!ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
              0ms DEBUG output={}
            
            new judgment="prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules={}
              strip_cycles failed_rules={}
                0ms DEBUG cycles={}, non_cycles={}
                0ms DEBUG return=({}, HasNonCycle(false))
              
              0ms DEBUG return=FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }
            
            0ms DEBUG rule normalize-via-assumption failed at step 1 because judgment had no applicable rules: `prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }`  (crates/formality-prove/src/prove/prove_normalize.rs:27:14)
            0ms DEBUG output={}
          
          new judgment="prove_normalize { p: !ty_0, assumptions: {Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules={FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}
            strip_cycles failed_rules={FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}
              failed_rule failed_rule=FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }
                strip_cycles failed_rules={}
                  0ms DEBUG cycles={}, non_cycles={}
                  0ms DEBUG return=({}, HasNonCycle(false))
                
              
              0ms DEBUG cycles={FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}, non_cycles={}
              0ms DEBUG return=({FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}, HasNonCycle(false))
            
            0ms DEBUG return=FailedJudgment { judgment: "prove_normalize { p: !ty_0, assumptions: {Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }
          
          1ms DEBUG rule local parameter failed at step 0 because judgment `prove_normalize { p: !ty_0, assumptions: {Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }` failed at the following rule(s):
            the rule "normalize-via-assumption" failed at step #1 (crates/formality-prove/src/prove/prove_normalize.rs:27:14) because
              judgment had no applicable rules: `prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }` (crates/formality-prove/src/prove/is_local.rs:289:14)
          1ms DEBUG output={}
        
        new judgment="is_local_parameter { goal: !ty_0, assumptions: {Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules={FailedRule { rule_name_index: Some(("local parameter", 0)), file: "crates/formality-prove/src/prove/is_local.rs", line: 289, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: !ty_0, assumptions: {Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }}
          strip_cycles failed_rules={FailedRule { rule_name_index: Some(("local parameter", 0)), file: "crates/formality-prove/src/prove/is_local.rs", line: 289, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: !ty_0, assumptions: {Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }}
            failed_rule failed_rule=FailedRule { rule_name_index: Some(("local parameter", 0)), file: "crates/formality-prove/src/prove/is_local.rs", line: 289, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: !ty_0, assumptions: {Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }
              strip_cycles failed_rules={FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}
                failed_rule failed_rule=FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }
                  strip_cycles failed_rules={}
                    0ms DEBUG cycles={}, non_cycles={}
                    0ms DEBUG return=({}, HasNonCycle(false))
                  
                
                0ms DEBUG cycles={FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}, non_cycles={}
                0ms DEBUG return=({FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}, HasNonCycle(false))
              
            
            0ms DEBUG cycles={FailedRule { rule_name_index: Some(("local parameter", 0)), file: "crates/formality-prove/src/prove/is_local.rs", line: 289, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: !ty_0, assumptions: {Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }}, non_cycles={}
            0ms DEBUG return=({FailedRule { rule_name_index: Some(("local parameter", 0)), file: "crates/formality-prove/src/prove/is_local.rs", line: 289, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: !ty_0, assumptions: {Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }}, HasNonCycle(false))
          
          0ms DEBUG return=FailedJudgment { judgment: "is_local_parameter { goal: !ty_0, assumptions: {Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("local parameter", 0)), file: "crates/formality-prove/src/prove/is_local.rs", line: 289, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: !ty_0, assumptions: {Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("normalize-via-assumption", 1)), file: "crates/formality-prove/src/prove/prove_normalize.rs", line: 27, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }) }} }
        
        2ms DEBUG rule local parameter failed at step 1 because judgment `is_local_parameter { goal: !ty_0, assumptions: {Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }` failed at the following rule(s):
          the rule "local parameter" failed at step #0 (crates/formality-prove/src/prove/is_local.rs:289:14) because
            judgment `prove_normalize { p: !ty_0, assumptions: {Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }` failed at the following rule(s):
              the rule "normalize-via-assumption" failed at step #1 (crates/formality-prove/src/prove/prove_normalize.rs:27:14) because
                judgment had no applicable rules: `prove_normalize_via { goal: !ty_0, via: Not(!ty_0), assumptions: {Not(!ty_0)}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }` (crates/formality-prove/src/prove/is_local.rs:217:14)
        2ms DEBUG output={Constraints { env: Env { variables: [!ty_0], bias: Soundness }, known_true: true, substitution: {} }}
      
      2ms DEBUG produced Constraints { env: Env { variables: [!ty_0], bias: Soundness }, known_true: true, substitution: {} } from rule "trait ref is local" in judgment "prove_wc"
      3ms DEBUG output={Constraints { env: Env { variables: [!ty_0], bias: Soundness }, known_true: true, substitution: {} }}
    
    prove_after constraints=Constraints { env: Env { variables: [!ty_0], bias: Soundness }, known_true: true, substitution: {} }, goal={}, assumptions={Not(!ty_0)}, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
      prove goal={}, assumptions={Not(!ty_0)}, env=Env { variables: [!ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
        prove_wc_list goal={}, assumptions={Not(!ty_0)}, env=Env { variables: [!ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
          0ms DEBUG produced Constraints { env: Env { variables: [!ty_0], bias: Soundness }, known_true: true, substitution: {} } from rule "none" in judgment "prove_wc_list"
          0ms DEBUG output={Constraints { env: Env { variables: [!ty_0], bias: Soundness }, known_true: true, substitution: {} }}
        
        0ms DEBUG result_set={Constraints { env: Env { variables: [!ty_0], bias: Soundness }, known_true: true, substitution: {} }}
      
      0ms DEBUG produced Constraints { env: Env { variables: [!ty_0], bias: Soundness }, known_true: true, substitution: {} } from rule "prove_after" in judgment "prove_after"
      0ms DEBUG output={Constraints { env: Env { variables: [!ty_0], bias: Soundness }, known_true: true, substitution: {} }}
    
    3ms DEBUG produced Constraints { env: Env { variables: [!ty_0], bias: Soundness }, known_true: true, substitution: {} } from rule "some" in judgment "prove_wc_list"
    3ms DEBUG output={Constraints { env: Env { variables: [!ty_0], bias: Soundness }, known_true: true, substitution: {} }}
  
  4ms DEBUG result_set={Constraints { env: Env { variables: [!ty_0], bias: Soundness }, known_true: true, substitution: {} }}

overlap_check impl_a=impl Foo for u32 { }, impl_b=impl <ty> Foo for ^ty0_0 where ^ty0_0 : Not { }
  prove_not_goal env=Env { variables: [!ty_1], bias: Soundness }
    is_definitely_not_proveable 
      0ms DEBUG assumptions={}, data={Not(!ty_1), u32 = !ty_1}
      prove goal={Not(?ty_0), u32 = ?ty_0}, assumptions={}, env=Env { variables: [?ty_0], bias: Completeness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
        prove_wc_list goal={Not(?ty_0), u32 = ?ty_0}, assumptions={}, env=Env { variables: [?ty_0], bias: Completeness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
          prove_wc goal=Not(?ty_0), assumptions={}, env=Env { variables: [?ty_0], bias: Completeness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
            may_be_remote assumptions={}, goal=Not(?ty_0), decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}), env=Env { variables: [?ty_0], bias: Completeness }
              may_be_downstream_trait_ref goal=Not(?ty_0), assumptions={}, env=Env { variables: [?ty_0], bias: Completeness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                may_be_downstream_parameter parameter=?ty_0, assumptions={}, env=Env { variables: [?ty_0], bias: Completeness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                  0ms DEBUG produced Constraints { env: Env { variables: [?ty_0], bias: Completeness }, known_true: true, substitution: {} } from rule "type variable" in judgment "may_be_downstream_parameter"
                  0ms DEBUG output={Constraints { env: Env { variables: [?ty_0], bias: Completeness }, known_true: true, substitution: {} }}
                
                0ms DEBUG produced Constraints { env: Env { variables: [?ty_0], bias: Completeness }, known_true: true, substitution: {} } from rule "may_be_downstream_trait_ref" in judgment "may_be_downstream_trait_ref"
                0ms DEBUG output={Constraints { env: Env { variables: [?ty_0], bias: Completeness }, known_true: true, substitution: {} }}
              
              0ms DEBUG produced Constraints { env: Env { variables: [?ty_0], bias: Completeness }, known_true: true, substitution: {} } from rule "may be defined downstream" in judgment "may_be_remote"
              may_not_be_provable 
                0ms DEBUG assumptions={}, data=Not(?ty_0)
                is_local_trait_ref goal=Not(!ty_1), assumptions={}, env=Env { variables: [!ty_1], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                  0ms DEBUG produced Constraints { env: Env { variables: [!ty_1], bias: Soundness }, known_true: true, substitution: {} } from rule "local trait" in judgment "is_local_trait_ref"
                  is_local_parameter goal=!ty_1, assumptions={}, env=Env { variables: [!ty_1], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                    prove_normalize p=!ty_1, assumptions={}, env=Env { variables: [!ty_1], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                      0ms DEBUG output={}
                    
                    new judgment="prove_normalize { p: !ty_1, assumptions: {}, env: Env { variables: [!ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules={}
                      strip_cycles failed_rules={}
                        0ms DEBUG cycles={}, non_cycles={}
                        0ms DEBUG return=({}, HasNonCycle(false))
                      
                      0ms DEBUG return=FailedJudgment { judgment: "prove_normalize { p: !ty_1, assumptions: {}, env: Env { variables: [!ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }
                    
                    0ms DEBUG rule local parameter failed at step 0 because judgment had no applicable rules: `prove_normalize { p: !ty_1, assumptions: {}, env: Env { variables: [!ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }`  (crates/formality-prove/src/prove/is_local.rs:289:14)
                    0ms DEBUG output={}
                  
                  new judgment="is_local_parameter { goal: !ty_1, assumptions: {}, env: Env { variables: [!ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules={FailedRule { rule_name_index: Some(("local parameter", 0)), file: "crates/formality-prove/src/prove/is_local.rs", line: 289, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: !ty_1, assumptions: {}, env: Env { variables: [!ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}
                    strip_cycles failed_rules={FailedRule { rule_name_index: Some(("local parameter", 0)), file: "crates/formality-prove/src/prove/is_local.rs", line: 289, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: !ty_1, assumptions: {}, env: Env { variables: [!ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}
                      failed_rule failed_rule=FailedRule { rule_name_index: Some(("local parameter", 0)), file: "crates/formality-prove/src/prove/is_local.rs", line: 289, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: !ty_1, assumptions: {}, env: Env { variables: [!ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }
                        strip_cycles failed_rules={}
                          0ms DEBUG cycles={}, non_cycles={}
                          0ms DEBUG return=({}, HasNonCycle(false))
                        
                      
                      0ms DEBUG cycles={FailedRule { rule_name_index: Some(("local parameter", 0)), file: "crates/formality-prove/src/prove/is_local.rs", line: 289, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: !ty_1, assumptions: {}, env: Env { variables: [!ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}, non_cycles={}
                      0ms DEBUG return=({FailedRule { rule_name_index: Some(("local parameter", 0)), file: "crates/formality-prove/src/prove/is_local.rs", line: 289, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: !ty_1, assumptions: {}, env: Env { variables: [!ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}, HasNonCycle(false))
                    
                    0ms DEBUG return=FailedJudgment { judgment: "is_local_parameter { goal: !ty_1, assumptions: {}, env: Env { variables: [!ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("local parameter", 0)), file: "crates/formality-prove/src/prove/is_local.rs", line: 289, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_normalize { p: !ty_1, assumptions: {}, env: Env { variables: [!ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }} }
                  
                  1ms DEBUG rule local parameter failed at step 1 because judgment `is_local_parameter { goal: !ty_1, assumptions: {}, env: Env { variables: [!ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }` failed at the following rule(s):
                    the rule "local parameter" failed at step #0 (crates/formality-prove/src/prove/is_local.rs:289:14) because
                      judgment had no applicable rules: `prove_normalize { p: !ty_1, assumptions: {}, env: Env { variables: [!ty_1], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }` (crates/formality-prove/src/prove/is_local.rs:217:14)
                  1ms DEBUG output={Constraints { env: Env { variables: [!ty_1], bias: Soundness }, known_true: true, substitution: {} }}
                
                new judgment="negation_via_failure", failed_rules={FailedRule { rule_name_index: None, file: "crates/formality-prove/src/prove/negation.rs", line: 99, column: 17, cause: Inapplicable { reason: "found an unconditionally true solution Constraints { env: Env { variables: [!ty_1], bias: Soundness }, known_true: true, substitution: {} }" } }}
                  strip_cycles failed_rules={FailedRule { rule_name_index: None, file: "crates/formality-prove/src/prove/negation.rs", line: 99, column: 17, cause: Inapplicable { reason: "found an unconditionally true solution Constraints { env: Env { variables: [!ty_1], bias: Soundness }, known_true: true, substitution: {} }" } }}
                    failed_rule failed_rule=FailedRule { rule_name_index: None, file: "crates/formality-prove/src/prove/negation.rs", line: 99, column: 17, cause: Inapplicable { reason: "found an unconditionally true solution Constraints { env: Env { variables: [!ty_1], bias: Soundness }, known_true: true, substitution: {} }" } }
                    
                    0ms DEBUG cycles={}, non_cycles={FailedRule { rule_name_index: None, file: "crates/formality-prove/src/prove/negation.rs", line: 99, column: 17, cause: Inapplicable { reason: "found an unconditionally true solution Constraints { env: Env { variables: [!ty_1], bias: Soundness }, known_true: true, substitution: {} }" } }}
                    0ms DEBUG return=({FailedRule { rule_name_index: None, file: "crates/formality-prove/src/prove/negation.rs", line: 99, column: 17, cause: Inapplicable { reason: "found an unconditionally true solution Constraints { env: Env { variables: [!ty_1], bias: Soundness }, known_true: true, substitution: {} }" } }}, HasNonCycle(true))
                  
                  0ms DEBUG return=FailedJudgment { judgment: "negation_via_failure", failed_rules: {FailedRule { rule_name_index: None, file: "crates/formality-prove/src/prove/negation.rs", line: 99, column: 17, cause: Inapplicable { reason: "found an unconditionally true solution Constraints { env: Env { variables: [!ty_1], bias: Soundness }, known_true: true, substitution: {} }" } }} }
                
              
              2ms DEBUG rule may be added by upstream in a minor release failed at step 0 because judgment `negation_via_failure` failed at the following rule(s):
                failed at (crates/formality-prove/src/prove/negation.rs:99:17) because
                  found an unconditionally true solution Constraints { env: Env { variables: [!ty_1], bias: Soundness }, known_true: true, substitution: {} } (crates/formality-prove/src/prove/is_local.rs:68:14)
              2ms DEBUG output={Constraints { env: Env { variables: [?ty_0], bias: Completeness }, known_true: true, substitution: {} }}
            
            2ms DEBUG produced Constraints { env: Env { variables: [?ty_0], bias: Completeness }, known_true: true, substitution: {} } from rule "coherence / remote impl" in judgment "prove_wc"
            2ms DEBUG rule trait implied bound failed at step 0 because expression evaluated to an empty collection: `decls.trait_invariants()` (crates/formality-prove/src/prove/prove_wc.rs:92:14)
            3ms DEBUG output={Constraints { env: Env { variables: [?ty_0], bias: Completeness }, known_true: true, substitution: {} }}
          
          prove_after constraints=Constraints { env: Env { variables: [?ty_0], bias: Completeness }, known_true: true, substitution: {} }, goal={u32 = ?ty_0}, assumptions={}, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
            prove goal={u32 = ?ty_0}, assumptions={}, env=Env { variables: [?ty_0], bias: Completeness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
              prove_wc_list goal={u32 = ?ty_0}, assumptions={}, env=Env { variables: [?ty_0], bias: Completeness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                prove_wc goal=u32 = ?ty_0, assumptions={}, env=Env { variables: [?ty_0], bias: Completeness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                  prove_eq a=u32, b=?ty_0, assumptions={}, env=Env { variables: [?ty_0], bias: Completeness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                    prove_eq a=?ty_0, b=u32, assumptions={}, env=Env { variables: [?ty_0], bias: Completeness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                      0ms DEBUG recursive call to prove_eq { a: u32, b: ?ty_0, assumptions: {}, env: Env { variables: [?ty_0], bias: Completeness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }, yielding {}
                      new judgment="prove_eq { a: u32, b: ?ty_0, assumptions: {}, env: Env { variables: [?ty_0], bias: Completeness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules={}
                        strip_cycles failed_rules={}
                          0ms DEBUG cycles={}, non_cycles={}
                          0ms DEBUG return=({}, HasNonCycle(false))
                        
                        0ms DEBUG return=FailedJudgment { judgment: "prove_eq { a: u32, b: ?ty_0, assumptions: {}, env: Env { variables: [?ty_0], bias: Completeness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }
                      
                      0ms DEBUG rule symmetric failed at step 0 because judgment had no applicable rules: `prove_eq { a: u32, b: ?ty_0, assumptions: {}, env: Env { variables: [?ty_0], bias: Completeness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }`  (crates/formality-prove/src/prove/prove_eq.rs:38:14)
                      prove_existential_var_eq v=?ty_0, b=u32, assumptions={}, env=Env { variables: [?ty_0], bias: Completeness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                        equate_variable x=?ty_0, p=u32, env=Env { variables: [?ty_0], bias: Completeness }
                          0ms DEBUG equated: constraints=Constraints { env: Env { variables: [?ty_0], bias: Completeness }, known_true: true, substitution: {?ty_0 => u32} }, goals={}
                          prove_after constraints=Constraints { env: Env { variables: [?ty_0], bias: Completeness }, known_true: true, substitution: {?ty_0 => u32} }, goal={}, assumptions={}, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                            prove goal={}, assumptions={}, env=Env { variables: [], bias: Completeness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                              prove_wc_list goal={}, assumptions={}, env=Env { variables: [], bias: Completeness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                                0ms DEBUG produced Constraints { env: Env { variables: [], bias: Completeness }, known_true: true, substitution: {} } from rule "none" in judgment "prove_wc_list"
                                0ms DEBUG output={Constraints { env: Env { variables: [], bias: Completeness }, known_true: true, substitution: {} }}
                              
                              0ms DEBUG result_set={Constraints { env: Env { variables: [], bias: Completeness }, known_true: true, substitution: {} }}
                            
                            0ms DEBUG produced Constraints { env: Env { variables: [?ty_0], bias: Completeness }, known_true: true, substitution: {?ty_0 => u32} } from rule "prove_after" in judgment "prove_after"
                            0ms DEBUG output={Constraints { env: Env { variables: [?ty_0], bias: Completeness }, known_true: true, substitution: {?ty_0 => u32} }}
                          
                        
                        1ms DEBUG produced Constraints { env: Env { variables: [?ty_0], bias: Completeness }, known_true: true, substitution: {?ty_0 => u32} } from rule "existential-nonvar" in judgment "prove_existential_var_eq"
                        1ms DEBUG output={Constraints { env: Env { variables: [?ty_0], bias: Completeness }, known_true: true, substitution: {?ty_0 => u32} }}
                      
                      1ms DEBUG produced Constraints { env: Env { variables: [?ty_0], bias: Completeness }, known_true: true, substitution: {?ty_0 => u32} } from rule "existential" in judgment "prove_eq"
                      prove_normalize p=?ty_0, assumptions={}, env=Env { variables: [?ty_0], bias: Completeness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                        0ms DEBUG output={}
                      
                      new judgment="prove_normalize { p: ?ty_0, assumptions: {}, env: Env { variables: [?ty_0], bias: Completeness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules={}
                        strip_cycles failed_rules={}
                          0ms DEBUG cycles={}, non_cycles={}
                          0ms DEBUG return=({}, HasNonCycle(false))
                        
                        0ms DEBUG return=FailedJudgment { judgment: "prove_normalize { p: ?ty_0, assumptions: {}, env: Env { variables: [?ty_0], bias: Completeness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }
                      
                      2ms DEBUG rule normalize-l failed at step 0 because judgment had no applicable rules: `prove_normalize { p: ?ty_0, assumptions: {}, env: Env { variables: [?ty_0], bias: Completeness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }`  (crates/formality-prove/src/prove/prove_eq.rs:68:14)
                      2ms DEBUG output={Constraints { env: Env { variables: [?ty_0], bias: Completeness }, known_true: true, substitution: {?ty_0 => u32} }}
                    
                    2ms DEBUG produced Constraints { env: Env { variables: [?ty_0], bias: Completeness }, known_true: true, substitution: {?ty_0 => u32} } from rule "symmetric" in judgment "prove_eq"
                    prove_normalize p=u32, assumptions={}, env=Env { variables: [?ty_0], bias: Completeness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                      0ms DEBUG output={}
                    
                    new judgment="prove_normalize { p: u32, assumptions: {}, env: Env { variables: [?ty_0], bias: Completeness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules={}
                      strip_cycles failed_rules={}
                        0ms DEBUG cycles={}, non_cycles={}
                        0ms DEBUG return=({}, HasNonCycle(false))
                      
                      0ms DEBUG return=FailedJudgment { judgment: "prove_normalize { p: u32, assumptions: {}, env: Env { variables: [?ty_0], bias: Completeness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }
                    
                    2ms DEBUG rule normalize-l failed at step 0 because judgment had no applicable rules: `prove_normalize { p: u32, assumptions: {}, env: Env { variables: [?ty_0], bias: Completeness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }`  (crates/formality-prove/src/prove/prove_eq.rs:68:14)
                    2ms DEBUG output={Constraints { env: Env { variables: [?ty_0], bias: Completeness }, known_true: true, substitution: {?ty_0 => u32} }}
                    3ms DEBUG output is different from previous iteration, re-executing until fixed point is reached
                  
                  prove_eq a=u32, b=?ty_0, assumptions={}, env=Env { variables: [?ty_0], bias: Completeness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                    prove_eq a=?ty_0, b=u32, assumptions={}, env=Env { variables: [?ty_0], bias: Completeness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                      0ms DEBUG recursive call to prove_eq { a: u32, b: ?ty_0, assumptions: {}, env: Env { variables: [?ty_0], bias: Completeness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }, yielding {Constraints { env: Env { variables: [?ty_0], bias: Completeness }, known_true: true, substitution: {?ty_0 => u32} }}
                      0ms DEBUG produced Constraints { env: Env { variables: [?ty_0], bias: Completeness }, known_true: true, substitution: {?ty_0 => u32} } from rule "symmetric" in judgment "prove_eq"
                      prove_existential_var_eq v=?ty_0, b=u32, assumptions={}, env=Env { variables: [?ty_0], bias: Completeness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                        equate_variable x=?ty_0, p=u32, env=Env { variables: [?ty_0], bias: Completeness }
                          0ms DEBUG equated: constraints=Constraints { env: Env { variables: [?ty_0], bias: Completeness }, known_true: true, substitution: {?ty_0 => u32} }, goals={}
                          prove_after constraints=Constraints { env: Env { variables: [?ty_0], bias: Completeness }, known_true: true, substitution: {?ty_0 => u32} }, goal={}, assumptions={}, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                            prove goal={}, assumptions={}, env=Env { variables: [], bias: Completeness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                              prove_wc_list goal={}, assumptions={}, env=Env { variables: [], bias: Completeness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                                0ms DEBUG produced Constraints { env: Env { variables: [], bias: Completeness }, known_true: true, substitution: {} } from rule "none" in judgment "prove_wc_list"
                                0ms DEBUG output={Constraints { env: Env { variables: [], bias: Completeness }, known_true: true, substitution: {} }}
                              
                              0ms DEBUG result_set={Constraints { env: Env { variables: [], bias: Completeness }, known_true: true, substitution: {} }}
                            
                            0ms DEBUG produced Constraints { env: Env { variables: [?ty_0], bias: Completeness }, known_true: true, substitution: {?ty_0 => u32} } from rule "prove_after" in judgment "prove_after"
                            0ms DEBUG output={Constraints { env: Env { variables: [?ty_0], bias: Completeness }, known_true: true, substitution: {?ty_0 => u32} }}
                          
                        
                        0ms DEBUG produced Constraints { env: Env { variables: [?ty_0], bias: Completeness }, known_true: true, substitution: {?ty_0 => u32} } from rule "existential-nonvar" in judgment "prove_existential_var_eq"
                        1ms DEBUG output={Constraints { env: Env { variables: [?ty_0], bias: Completeness }, known_true: true, substitution: {?ty_0 => u32} }}
                      
                      1ms DEBUG produced Constraints { env: Env { variables: [?ty_0], bias: Completeness }, known_true: true, substitution: {?ty_0 => u32} } from rule "existential" in judgment "prove_eq"
                      prove_normalize p=?ty_0, assumptions={}, env=Env { variables: [?ty_0], bias: Completeness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                        0ms DEBUG output={}
                      
                      new judgment="prove_normalize { p: ?ty_0, assumptions: {}, env: Env { variables: [?ty_0], bias: Completeness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules={}
                        strip_cycles failed_rules={}
                          0ms DEBUG cycles={}, non_cycles={}
                          0ms DEBUG return=({}, HasNonCycle(false))
                        
                        0ms DEBUG return=FailedJudgment { judgment: "prove_normalize { p: ?ty_0, assumptions: {}, env: Env { variables: [?ty_0], bias: Completeness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }
                      
                      1ms DEBUG rule normalize-l failed at step 0 because judgment had no applicable rules: `prove_normalize { p: ?ty_0, assumptions: {}, env: Env { variables: [?ty_0], bias: Completeness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }`  (crates/formality-prove/src/prove/prove_eq.rs:68:14)
                      1ms DEBUG output={Constraints { env: Env { variables: [?ty_0], bias: Completeness }, known_true: true, substitution: {?ty_0 => u32} }}
                    
                    2ms DEBUG produced Constraints { env: Env { variables: [?ty_0], bias: Completeness }, known_true: true, substitution: {?ty_0 => u32} } from rule "symmetric" in judgment "prove_eq"
                    prove_normalize p=u32, assumptions={}, env=Env { variables: [?ty_0], bias: Completeness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                      0ms DEBUG output={}
                    
                    new judgment="prove_normalize { p: u32, assumptions: {}, env: Env { variables: [?ty_0], bias: Completeness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules={}
                      strip_cycles failed_rules={}
                        0ms DEBUG cycles={}, non_cycles={}
                        0ms DEBUG return=({}, HasNonCycle(false))
                      
                      0ms DEBUG return=FailedJudgment { judgment: "prove_normalize { p: u32, assumptions: {}, env: Env { variables: [?ty_0], bias: Completeness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }
                    
                    2ms DEBUG rule normalize-l failed at step 0 because judgment had no applicable rules: `prove_normalize { p: u32, assumptions: {}, env: Env { variables: [?ty_0], bias: Completeness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }`  (crates/formality-prove/src/prove/prove_eq.rs:68:14)
                    2ms DEBUG output={Constraints { env: Env { variables: [?ty_0], bias: Completeness }, known_true: true, substitution: {?ty_0 => u32} }}
                  
                  5ms DEBUG produced Constraints { env: Env { variables: [?ty_0], bias: Completeness }, known_true: true, substitution: {?ty_0 => u32} } from rule "eq" in judgment "prove_wc"
                  6ms DEBUG output={Constraints { env: Env { variables: [?ty_0], bias: Completeness }, known_true: true, substitution: {?ty_0 => u32} }}
                
                prove_after constraints=Constraints { env: Env { variables: [?ty_0], bias: Completeness }, known_true: true, substitution: {?ty_0 => u32} }, goal={}, assumptions={}, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                  prove goal={}, assumptions={}, env=Env { variables: [], bias: Completeness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                    prove_wc_list goal={}, assumptions={}, env=Env { variables: [], bias: Completeness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
                      0ms DEBUG produced Constraints { env: Env { variables: [], bias: Completeness }, known_true: true, substitution: {} } from rule "none" in judgment "prove_wc_list"
                      0ms DEBUG output={Constraints { env: Env { variables: [], bias: Completeness }, known_true: true, substitution: {} }}
                    
                    0ms DEBUG result_set={Constraints { env: Env { variables: [], bias: Completeness }, known_true: true, substitution: {} }}
                  
                  0ms DEBUG produced Constraints { env: Env { variables: [?ty_0], bias: Completeness }, known_true: true, substitution: {?ty_0 => u32} } from rule "prove_after" in judgment "prove_after"
                  0ms DEBUG output={Constraints { env: Env { variables: [?ty_0], bias: Completeness }, known_true: true, substitution: {?ty_0 => u32} }}
                
                7ms DEBUG produced Constraints { env: Env { variables: [?ty_0], bias: Completeness }, known_true: true, substitution: {?ty_0 => u32} } from rule "some" in judgment "prove_wc_list"
                7ms DEBUG output={Constraints { env: Env { variables: [?ty_0], bias: Completeness }, known_true: true, substitution: {?ty_0 => u32} }}
              
              7ms DEBUG result_set={Constraints { env: Env { variables: [?ty_0], bias: Completeness }, known_true: true, substitution: {?ty_0 => u32} }}
            
            7ms DEBUG produced Constraints { env: Env { variables: [?ty_0], bias: Completeness }, known_true: true, substitution: {?ty_0 => u32} } from rule "prove_after" in judgment "prove_after"
            7ms DEBUG output={Constraints { env: Env { variables: [?ty_0], bias: Completeness }, known_true: true, substitution: {?ty_0 => u32} }}
          
          10ms DEBUG produced Constraints { env: Env { variables: [?ty_0], bias: Completeness }, known_true: true, substitution: {?ty_0 => u32} } from rule "some" in judgment "prove_wc_list"
          10ms DEBUG output={Constraints { env: Env { variables: [?ty_0], bias: Completeness }, known_true: true, substitution: {?ty_0 => u32} }}
        
        11ms DEBUG result_set={Constraints { env: Env { variables: [?ty_0], bias: Completeness }, known_true: true, substitution: {?ty_0 => u32} }}
      
      11ms DEBUG ambiguous `negation_via_failure`, solutions: {Constraints { env: Env { variables: [?ty_1], bias: Completeness }, known_true: true, substitution: {?ty_1 => u32} }}
    
  
  prove goal={! Not(!ty_0)}, assumptions={Not(!ty_0), u32 = !ty_0}, env=Env { variables: [!ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
    prove_wc_list goal={! Not(!ty_0)}, assumptions={Not(!ty_0), u32 = !ty_0}, env=Env { variables: [!ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
      prove_wc goal=! Not(!ty_0), assumptions={Not(!ty_0), u32 = !ty_0}, env=Env { variables: [!ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
        prove_via goal=! Not(!ty_0), via=Not(!ty_0), assumptions={Not(!ty_0), u32 = !ty_0}, env=Env { variables: [!ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
          0ms DEBUG output={}
        
        new judgment="prove_via { goal: ! Not(!ty_0), via: Not(!ty_0), assumptions: {Not(!ty_0), u32 = !ty_0}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules={}
          strip_cycles failed_rules={}
            0ms DEBUG cycles={}, non_cycles={}
            0ms DEBUG return=({}, HasNonCycle(false))
          
          0ms DEBUG return=FailedJudgment { judgment: "prove_via { goal: ! Not(!ty_0), via: Not(!ty_0), assumptions: {Not(!ty_0), u32 = !ty_0}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }
        
        0ms DEBUG rule assumption failed at step 1 because judgment had no applicable rules: `prove_via { goal: ! Not(!ty_0), via: Not(!ty_0), assumptions: {Not(!ty_0), u32 = !ty_0}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }`  (crates/formality-prove/src/prove/prove_wc.rs:44:14)
        prove_via goal=! Not(!ty_0), via=u32 = !ty_0, assumptions={Not(!ty_0), u32 = !ty_0}, env=Env { variables: [!ty_0], bias: Soundness }, decls=decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {})
          0ms DEBUG output={}
        
        new judgment="prove_via { goal: ! Not(!ty_0), via: u32 = !ty_0, assumptions: {Not(!ty_0), u32 = !ty_0}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules={}
          strip_cycles failed_rules={}
            0ms DEBUG cycles={}, non_cycles={}
            0ms DEBUG return=({}, HasNonCycle(false))
          
          0ms DEBUG return=FailedJudgment { judgment: "prove_via { goal: ! Not(!ty_0), via: u32 = !ty_0, assumptions: {Not(!ty_0), u32 = !ty_0}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }
        
        1ms DEBUG rule assumption failed at step 1 because judgment had no applicable rules: `prove_via { goal: ! Not(!ty_0), via: u32 = !ty_0, assumptions: {Not(!ty_0), u32 = !ty_0}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }`  (crates/formality-prove/src/prove/prove_wc.rs:44:14)
        1ms DEBUG rule negative impl failed at step 0 because expression evaluated to an empty collection: `decls.neg_impl_decls(&trait_ref.trait_id)` (crates/formality-prove/src/prove/prove_wc.rs:76:14)
        1ms DEBUG output={}
      
      new judgment="prove_wc { goal: ! Not(!ty_0), assumptions: {Not(!ty_0), u32 = !ty_0}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules={FailedRule { rule_name_index: Some(("assumption", 1)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 44, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_via { goal: ! Not(!ty_0), via: Not(!ty_0), assumptions: {Not(!ty_0), u32 = !ty_0}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("assumption", 1)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 44, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_via { goal: ! Not(!ty_0), via: u32 = !ty_0, assumptions: {Not(!ty_0), u32 = !ty_0}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("negative impl", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 76, column: 14, cause: EmptyCollection { expr: "decls.neg_impl_decls(&trait_ref.trait_id)" } }}
        strip_cycles failed_rules={FailedRule { rule_name_index: Some(("assumption", 1)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 44, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_via { goal: ! Not(!ty_0), via: Not(!ty_0), assumptions: {Not(!ty_0), u32 = !ty_0}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("assumption", 1)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 44, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_via { goal: ! Not(!ty_0), via: u32 = !ty_0, assumptions: {Not(!ty_0), u32 = !ty_0}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("negative impl", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 76, column: 14, cause: EmptyCollection { expr: "decls.neg_impl_decls(&trait_ref.trait_id)" } }}
          failed_rule failed_rule=FailedRule { rule_name_index: Some(("assumption", 1)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 44, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_via { goal: ! Not(!ty_0), via: Not(!ty_0), assumptions: {Not(!ty_0), u32 = !ty_0}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }
            strip_cycles failed_rules={}
              0ms DEBUG cycles={}, non_cycles={}
              0ms DEBUG return=({}, HasNonCycle(false))
            
          
          failed_rule failed_rule=FailedRule { rule_name_index: Some(("assumption", 1)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 44, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_via { goal: ! Not(!ty_0), via: u32 = !ty_0, assumptions: {Not(!ty_0), u32 = !ty_0}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }
            strip_cycles failed_rules={}
              0ms DEBUG cycles={}, non_cycles={}
              0ms DEBUG return=({}, HasNonCycle(false))
            
          
          failed_rule failed_rule=FailedRule { rule_name_index: Some(("negative impl", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 76, column: 14, cause: EmptyCollection { expr: "decls.neg_impl_decls(&trait_ref.trait_id)" } }
          
          0ms DEBUG cycles={FailedRule { rule_name_index: Some(("assumption", 1)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 44, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_via { goal: ! Not(!ty_0), via: Not(!ty_0), assumptions: {Not(!ty_0), u32 = !ty_0}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }, FailedRule { rule_name_index: Some(("assumption", 1)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 44, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_via { goal: ! Not(!ty_0), via: u32 = !ty_0, assumptions: {Not(!ty_0), u32 = !ty_0}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {} }) }}, non_cycles={FailedRule { rule_name_index: Some(("negative impl", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 76, column: 14, cause: EmptyCollection { expr: "decls.neg_impl_decls(&trait_ref.trait_id)" } }}
          0ms DEBUG return=({FailedRule { rule_name_index: Some(("negative impl", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 76, column: 14, cause: EmptyCollection { expr: "decls.neg_impl_decls(&trait_ref.trait_id)" } }}, HasNonCycle(true))
        
        0ms DEBUG return=FailedJudgment { judgment: "prove_wc { goal: ! Not(!ty_0), assumptions: {Not(!ty_0), u32 = !ty_0}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("negative impl", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 76, column: 14, cause: EmptyCollection { expr: "decls.neg_impl_decls(&trait_ref.trait_id)" } }} }
      
      2ms DEBUG rule some failed at step 0 because judgment `prove_wc { goal: ! Not(!ty_0), assumptions: {Not(!ty_0), u32 = !ty_0}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }` failed at the following rule(s):
        the rule "negative impl" failed at step #0 (crates/formality-prove/src/prove/prove_wc.rs:76:14) because
          expression evaluated to an empty collection: `decls.neg_impl_decls(&trait_ref.trait_id)` (crates/formality-prove/src/prove/prove_wc_list.rs:28:14)
      2ms DEBUG output={}
    
    new judgment="prove_wc_list { goal: {! Not(!ty_0)}, assumptions: {Not(!ty_0), u32 = !ty_0}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules={FailedRule { rule_name_index: Some(("some", 0)), file: "crates/formality-prove/src/prove/prove_wc_list.rs", line: 28, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_wc { goal: ! Not(!ty_0), assumptions: {Not(!ty_0), u32 = !ty_0}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("negative impl", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 76, column: 14, cause: EmptyCollection { expr: "decls.neg_impl_decls(&trait_ref.trait_id)" } }} }) }}
      strip_cycles failed_rules={FailedRule { rule_name_index: Some(("some", 0)), file: "crates/formality-prove/src/prove/prove_wc_list.rs", line: 28, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_wc { goal: ! Not(!ty_0), assumptions: {Not(!ty_0), u32 = !ty_0}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("negative impl", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 76, column: 14, cause: EmptyCollection { expr: "decls.neg_impl_decls(&trait_ref.trait_id)" } }} }) }}
        failed_rule failed_rule=FailedRule { rule_name_index: Some(("some", 0)), file: "crates/formality-prove/src/prove/prove_wc_list.rs", line: 28, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_wc { goal: ! Not(!ty_0), assumptions: {Not(!ty_0), u32 = !ty_0}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("negative impl", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 76, column: 14, cause: EmptyCollection { expr: "decls.neg_impl_decls(&trait_ref.trait_id)" } }} }) }
          strip_cycles failed_rules={FailedRule { rule_name_index: Some(("negative impl", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 76, column: 14, cause: EmptyCollection { expr: "decls.neg_impl_decls(&trait_ref.trait_id)" } }}
            failed_rule failed_rule=FailedRule { rule_name_index: Some(("negative impl", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 76, column: 14, cause: EmptyCollection { expr: "decls.neg_impl_decls(&trait_ref.trait_id)" } }
            
            0ms DEBUG cycles={}, non_cycles={FailedRule { rule_name_index: Some(("negative impl", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 76, column: 14, cause: EmptyCollection { expr: "decls.neg_impl_decls(&trait_ref.trait_id)" } }}
            0ms DEBUG return=({FailedRule { rule_name_index: Some(("negative impl", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 76, column: 14, cause: EmptyCollection { expr: "decls.neg_impl_decls(&trait_ref.trait_id)" } }}, HasNonCycle(true))
          
        
        0ms DEBUG cycles={}, non_cycles={FailedRule { rule_name_index: Some(("some", 0)), file: "crates/formality-prove/src/prove/prove_wc_list.rs", line: 28, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_wc { goal: ! Not(!ty_0), assumptions: {Not(!ty_0), u32 = !ty_0}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("negative impl", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 76, column: 14, cause: EmptyCollection { expr: "decls.neg_impl_decls(&trait_ref.trait_id)" } }} }) }}
        0ms DEBUG return=({FailedRule { rule_name_index: Some(("some", 0)), file: "crates/formality-prove/src/prove/prove_wc_list.rs", line: 28, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_wc { goal: ! Not(!ty_0), assumptions: {Not(!ty_0), u32 = !ty_0}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("negative impl", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 76, column: 14, cause: EmptyCollection { expr: "decls.neg_impl_decls(&trait_ref.trait_id)" } }} }) }}, HasNonCycle(true))
      
      0ms DEBUG return=FailedJudgment { judgment: "prove_wc_list { goal: {! Not(!ty_0)}, assumptions: {Not(!ty_0), u32 = !ty_0}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("some", 0)), file: "crates/formality-prove/src/prove/prove_wc_list.rs", line: 28, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_wc { goal: ! Not(!ty_0), assumptions: {Not(!ty_0), u32 = !ty_0}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("negative impl", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 76, column: 14, cause: EmptyCollection { expr: "decls.neg_impl_decls(&trait_ref.trait_id)" } }} }) }} }
    
    2ms DEBUG result_set=FailedJudgment { judgment: "prove_wc_list { goal: {! Not(!ty_0)}, assumptions: {Not(!ty_0), u32 = !ty_0}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("some", 0)), file: "crates/formality-prove/src/prove/prove_wc_list.rs", line: 28, column: 14, cause: FailedJudgment(FailedJudgment { judgment: "prove_wc { goal: ! Not(!ty_0), assumptions: {Not(!ty_0), u32 = !ty_0}, env: Env { variables: [!ty_0], bias: Soundness }, decls: decls(222, [trait Foo <ty> , trait Not <ty> ], [impl Foo(u32), impl <ty> Foo(^ty0_0) where {Not(^ty0_0)}], [], [], [], [], {Foo, Not}, {}) }", failed_rules: {FailedRule { rule_name_index: Some(("negative impl", 0)), file: "crates/formality-prove/src/prove/prove_wc.rs", line: 76, column: 14, cause: EmptyCollection { expr: "decls.neg_impl_decls(&trait_ref.trait_id)" } }} }) }} }
  

test test::coherence_overlap::u32_T_where_T_Not_impls ... FAILED

failures:

---- test::coherence_overlap::u32_T_where_T_Not_impls stdout ----
thread 'test::coherence_overlap::u32_T_where_T_Not_impls' panicked at src/test/coherence_overlap.rs:139:5:
expected `Ok`, got `Err`: impls may overlap:
impl Foo for u32 { }
impl <ty> Foo for ^ty0_0 where ^ty0_0 : Not { }
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace


failures:
    test::coherence_overlap::u32_T_where_T_Not_impls

test result: FAILED. 0 passed; 1 failed; 0 ignored; 0 measured; 45 filtered out; finished in 0.11s

